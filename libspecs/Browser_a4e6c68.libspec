<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="Browser" type="LIBRARY" format="ROBOT" scope="GLOBAL" namedargs="true" generated="2022-11-17T18:13:02Z" specversion="2" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\__init__.py" lineno="101">
<version>14.2.1</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Browser library is a browser automation library for Robot Framework.

This is the keyword documentation for Browser library. For information
about installation, support, and more please visit the
[https://github.com/MarketSquare/robotframework-playwright|project pages].
For more information about Robot Framework itself, see [https://robotframework.org|robotframework.org].

Browser library uses
[https://github.com/microsoft/playwright|Playwright Node module]
to automate [https://www.chromium.org/Home|Chromium],
[https://www.mozilla.org/en-US/firefox/new/|Firefox]
and [https://webkit.org/|WebKit] with a single library.


== Table of contents ==

- `Browser, Context and Page`
- `Automatic page and context closing`
- `Finding elements`
- `Assertions`
- `Implicit waiting`
- `Experimental: Re-using same node process`
- `Scope Setting`
- `Extending Browser library with a JavaScript module`
- `Importing`
- `Shortcuts`
- `Tags`
- `Keywords`

= Browser, Context and Page =

Browser library works with three different layers that build on each other:
*Browser*, *Context* and *Page*.


== Browsers ==

A *browser* can be started with one of the three
different engines Chromium, Firefox or Webkit.

=== Supported Browsers ===

|   Browser     | Browser with this engine                          |
| ``chromium``  | Google Chrome, Microsoft Edge (since 2020), Opera |
| ``firefox``   | Mozilla Firefox                                   |
| ``webkit``    | Apple Safari, Mail, AppStore on MacOS and iOS     |

Since [https://github.com/microsoft/playwright|Playwright] comes with a pack of builtin
binaries for all browsers, no additional drivers e.g. geckodriver are needed.

All these browsers that cover more than 85% of the world wide used browsers,
can be tested on Windows, Linux and MacOS.
There is no need for dedicated machines anymore.

A browser process is started ``headless`` (without a GUI) by default.
Run `New Browser` with specified arguments if a browser with a GUI is requested
or if a proxy has to be configured.
A browser process can contain several contexts.


== Contexts ==

A *context* corresponds to a set of independent incognito pages in a browser
that share cookies, sessions or profile settings. Pages in two separate
contexts do not share cookies, sessions or profile settings.
Compared to Selenium, these do *not* require their own browser process.
To get a clean environment a test can just open a new context.
Due to this new independent browser sessions can be opened with
Robot Framework Browser about 10 times faster than with Selenium by
just opening a `New Context` within the opened browser.

To make pages in the same suite share state, use the same context by opening the
context with `New Context` on suite setup.

The context layer is useful e.g. for testing different user sessions on the
same webpage without opening a whole new browser context.
Contexts can also have detailed configurations, such as geo-location, language settings,
the viewport size or color scheme.
Contexts do also support http credentials to be set, so that basic authentication
can also be tested. To be able to download files within the test,
the ``acceptDownloads`` argument must be set to ``True`` in `New Context` keyword.
A context can contain different pages.


== Pages ==

A *page* does contain the content of the loaded web site and has a browsing history.
Pages and browser tabs are the same.

Typical usage could be:
| *** Test Cases ***
| Starting a browser with a page
|     New Browser    chromium    headless=false
|     New Context    viewport={'width': 1920, 'height': 1080}
|     New Page       https://marketsquare.github.io/robotframework-browser/Browser.html
|     Get Title      ==    Browser

The `Open Browser` keyword opens a new browser, a new context and a new page.
This keyword is useful for quick experiments or debugging sessions.

When a `New Page` is called without an open browser, `New Browser`
and `New Context` are executed with default values first.

Each Browser, Context and Page has a unique ID with which they can be addressed.
A full catalog of what is open can be received by `Get Browser Catalog` as a dictionary.

= Automatic page and context closing =

Controls when contexts and pages are closed during the test execution.

    If automatic closing level is `TEST`, contexts and pages that are created during a single test are
    automatically closed when the test ends. Contexts and pages that are created during suite setup are
    closed when the suite teardown ends.

    If automatic closing level is `SUITE`, all contexts and pages that are created during the test suite
    are closed when the suite teardown ends.

    If automatic closing level is `MANUAL`, nothing is closed automatically while the test execution
    is ongoing.

    All browsers are automatically closed, always and regardless of the automatic closing level at
    the end of the test execution. This will also close all remaining pages and contexts.

    Automatic closing can be configured or switched off with the auto_closing_level library import
    parameter.

    See: `Importing`

= Finding elements =

All keywords in the library that need to interact with an element
on a web page take an argument typically named ``selector`` that specifies
how to find the element. Keywords can find elements with strict mode. If
strict mode is true and locator finds multiple elements from the page, keyword
will fail. If keyword finds one element, keyword does not fail because of
strict mode. If strict mode is false, keyword does not fail if selector points
many elements. Strict mode is enabled by default, but can be changed in library
`importing` or `Set Strict Mode` keyword. Keyword documentation states if keyword
uses strict mode. If keyword does not state that strict mode is used, then strict
mode is not applied for the keyword. For more details, see Playwright
[https://playwright.dev/docs/api/class-page#page-query-selector|strict documentation].

Selector strategies that are supported by default are listed in the table
below.

| = Strategy = |     = Match based on =     |         = Example =                |
| ``css``      | CSS selector.              | ``css=.class &gt; \#login_btn``      |
| ``xpath``    | XPath expression.          | ``xpath=//input[@id="login_btn"]`` |
| ``text``     | Browser text engine.       | ``text=Login``                     |
| ``id``       | Element ID Attribute.      | ``id=login_btn``                   |

CSS Selectors can also be recorded with `Record selector` keyword.

== Explicit Selector Strategy ==

The explicit selector strategy is specified with a prefix using syntax
``strategy=value``. Spaces around the separator are ignored, so
``css=foo``, ``css= foo`` and ``css = foo`` are all equivalent.


== Implicit Selector Strategy ==

*The default selector strategy is `css`.*

If selector does not contain one of the know explicit selector strategies, it is
assumed to contain css selector.

Selectors that are starting with ``//`` or ``..`` are considered as xpath selectors.

Selectors that are in quotes are considered as text selectors.

Examples:

| # CSS selectors are default.
| `Click`  span &gt; button.some_class         # This is equivalent
| `Click`  css=span &gt; button.some_class     # to this.
|
| # // or .. leads to xpath selector strategy
| `Click`  //span/button[@class="some_class"]
| `Click`  xpath=//span/button[@class="some_class"]
|
| # "text" in quotes leads to exact text selector strategy
| `Click`  "Login"
| `Click`  text="Login"


== CSS ==

As written before, the default selector strategy is `css`. See
[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | css selector]
for more information.

Any malformed selector not starting with ``//`` or ``..`` nor starting and ending
with a quote is assumed to be a css selector.

Note that ``#`` is a comment character in [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#ignored-data | Robot Framework syntax] and needs to be
escaped like ``\#`` to work as a [https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors | css ID selector].

Examples:
| `Click`  span &gt; button.some_class
| `Get Text`  \#username_field  ==  George


== XPath ==

XPath engine is equivalent to [https://developer.mozilla.org/en/docs/Web/API/Document/evaluate|Document.evaluate].
Example: ``xpath=//html/body//span[text()="Hello World"]``.

Malformed selector starting with ``//`` or ``..`` is assumed to be an xpath selector.
For example, ``//html/body`` is converted to ``xpath=//html/body``. More
examples are displayed in `Examples`.

Note that xpath does not pierce [https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM|shadow_roots].


== Text ==

Text engine finds an element that contains a text node with the passed text.
For example, ``Click    text=Login`` clicks on a login button, and
``Wait For Elements State   text="lazy loaded text"`` waits for the "lazy loaded text"
to appear in the page.

Text engine finds fields based on their labels in text inserting keywords.

Malformed selector starting and ending with a quote (either ``"`` or ``'``) is assumed
to be a text selector. For example, ``Click    "Login"`` is converted to ``Click    text="Login"``.
Be aware that these leads to exact matches only!
More examples are displayed in `Examples`.


=== Insensitive match ===

By default, the match is case-insensitive, ignores leading/trailing whitespace and
searches for a substring. This means ``text= Login`` matches
``&lt;button&gt;Button loGIN (click me)&lt;/button&gt;``.

=== Exact match ===

Text body can be escaped with single or double quotes for precise matching,
insisting on exact match, including specified whitespace and case.
This means ``text="Login "`` will only match ``&lt;button&gt;Login &lt;/button&gt;`` with exactly
one space after "Login". Quoted text follows the usual escaping rules, e.g.
use ``\"`` to escape double quote in a double-quoted string: ``text="foo\"bar"``.

=== RegEx ===

Text body can also be a JavaScript-like regex wrapped in / symbols.
This means ``text=/^hello .*!$/i`` or ``text=/^Hello .*!$/`` will match ``&lt;span&gt;Hello Peter Parker!&lt;/span&gt;``
with any name after ``Hello``, ending with ``!``.
The first one flagged with ``i`` for case-insensitive.
See [https://regex101.com/|https://regex101.com] for more information about RegEx.

=== Button and Submit Values ===

Input elements of the type button and submit are rendered with their value as text,
and text engine finds them. For example, ``text=Login`` matches
``&lt;input type=button value="Login"&gt;``.

== Cascaded selector syntax ==

Browser library supports the same selector strategies as the underlying
Playwright node module: xpath, css, id and text. The strategy can either
be explicitly specified with a prefix or the strategy can be implicit.

A major advantage of Browser is that multiple selector engines can be used
within one selector. It is possible to mix XPath, CSS and Text selectors while
selecting a single element.

Selectors are strings that consists of one or more clauses separated by
``&gt;&gt;`` token, e.g. ``clause1 &gt;&gt; clause2 &gt;&gt; clause3``. When multiple clauses
are present, next one is queried relative to the previous one's result.
Browser library supports concatenation of different selectors separated by ``&gt;&gt;``.

For example:
| `Highlight Elements`    "Hello" &gt;&gt; ../.. &gt;&gt; .select_button
| `Highlight Elements`    text=Hello &gt;&gt; xpath=../.. &gt;&gt; css=.select_button

Each clause contains a selector engine name and selector body, e.g.
``engine=body``. Here ``engine`` is one of the supported engines (e.g. css or
a custom one). Selector ``body`` follows the format of the particular engine,
e.g. for css engine it should be a [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | css selector].
Body format is assumed to ignore leading and trailing white spaces,
so that extra whitespace can be added for readability. If the selector
engine needs to include ``&gt;&gt;`` in the body, it should be escaped
inside a string to not be confused with clause separator,
e.g. ``text="some &gt;&gt; text"``.

Selector engine name can be prefixed with ``*`` to capture an element that
matches the particular clause instead of the last one. For example,
``css=article &gt;&gt; text=Hello`` captures the element with the text ``Hello``,
and ``*css=article &gt;&gt; text=Hello`` (note the *) captures the article element
that contains some element with the text Hello.

For convenience, selectors in the wrong format are heuristically converted
to the right format. See `Implicit Selector Strategy`

== Examples ==
| # queries 'div' css selector
| Get Element    css=div
|
| # queries '//html/body/div' xpath selector
| Get Element    //html/body/div
|
| # queries '"foo"' text selector
| Get Element    text=foo
|
| # queries 'span' css selector inside the result of '//html/body/div' xpath selector
| Get Element    xpath=//html/body/div &gt;&gt; css=span
|
| # converted to 'css=div'
| Get Element    div
|
| # converted to 'xpath=//html/body/div'
| Get Element    //html/body/div
|
| # converted to 'text="foo"'
| Get Element    "foo"
|
| # queries the div element of every 2nd span element inside an element with the id foo
| Get Element    \#foo &gt;&gt; css=span:nth-child(2n+1) &gt;&gt; div
| Get Element    id=foo &gt;&gt; css=span:nth-child(2n+1) &gt;&gt; div

Be aware that using ``#`` as a starting character in Robot Framework would be interpreted as comment.
Due to that fact a ``#id`` must be escaped as ``\#id``.

== Frames ==

By default, selector chains do not cross frame boundaries. It means that a
simple CSS selector is not able to select an element located inside an iframe
or a frameset. For this use case, there is a special selector ``&gt;&gt;&gt;`` which can
be used to combine a selector for the frame and a selector for an element
inside a frame.

Given this simple pseudo html snippet:
| &lt;iframe id="iframe" src="src.html"&gt;
|   #document
|     &lt;!DOCTYPE html&gt;
|     &lt;html&gt;
|       &lt;head&gt;&lt;/head&gt;
|       &lt;body&gt;
|         &lt;button id="btn"&gt;Click Me&lt;/button&gt;
|       &lt;/body&gt;
|     &lt;/html&gt;
| &lt;/iframe&gt;

Here's a keyword call that clicks the button inside the frame.

| Click   id=iframe &gt;&gt;&gt; id=btn

The selectors on the left and right side of ``&gt;&gt;&gt;`` can be any valid selectors.
The selector clause directly before the frame opener ``&gt;&gt;&gt;`` must select the frame element.
Frame selection is the only place where Browser Library modifies the selector, as explained in above.
In all cases, the library does not alter the selector in any way, instead it is passed as is to the
Playwright side.

== WebComponents and Shadow DOM ==

Playwright and so also Browser are able to do automatic piercing of Shadow DOMs
and therefore are the best automation technology when working with WebComponents.

Also other technologies claim that they can handle
[https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM|Shadow DOM and Web Components].
However, none of them do pierce shadow roots automatically,
which may be inconvenient when working with Shadow DOM and Web Components.

For that reason, the css engine pierces shadow roots. More specifically, every
[https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator|Descendant combinator]
pierces an arbitrary number of open shadow roots, including the implicit descendant combinator
at the start of the selector.

That means, it is not necessary to select each shadow host, open its shadow root and
select the next shadow host until you reach the element that should be controlled.

=== CSS:light ===

``css:light`` engine is equivalent to [https://developer.mozilla.org/en/docs/Web/API/Document/querySelector | Document.querySelector]
and behaves according to the CSS spec.
However, it does not pierce shadow roots.

``css`` engine first searches for elements in the light dom in the iteration order,
and then recursively inside open shadow roots in the iteration order. It does not
search inside closed shadow roots or iframes.

Examples:

| &lt;article&gt;
|   &lt;div&gt;In the light dom&lt;/div&gt;
|   &lt;div slot='myslot'&gt;In the light dom, but goes into the shadow slot&lt;/div&gt;
|   &lt;open mode shadow root&gt;
|       &lt;div class='in-the-shadow'&gt;
|           &lt;span class='content'&gt;
|               In the shadow dom
|               &lt;open mode shadow root&gt;
|                   &lt;li id='target'&gt;Deep in the shadow&lt;/li&gt;
|               &lt;/open mode shadow root&gt;
|           &lt;/span&gt;
|       &lt;/div&gt;
|       &lt;slot name='myslot'&gt;&lt;/slot&gt;
|   &lt;/open mode shadow root&gt;
| &lt;/article&gt;

Note that ``&lt;open mode shadow root&gt;`` is not an html element, but rather a shadow root
created with ``element.attachShadow({mode: 'open'})``.

- Both ``"css=article div"`` and ``"css:light=article div"`` match the first ``&lt;div&gt;In the light dom&lt;/div&gt;``.
- Both ``"css=article &gt; div"`` and ``"css:light=article &gt; div"`` match two ``div`` elements that are direct children of the ``article``.
- ``"css=article .in-the-shadow"`` matches the ``&lt;div class='in-the-shadow'&gt;``, piercing the shadow root, while ``"css:light=article .in-the-shadow"`` does not match anything.
- ``"css:light=article div &gt; span"`` does not match anything, because both light-dom ``div`` elements do not contain a ``span``.
- ``"css=article div &gt; span"`` matches the ``&lt;span class='content'&gt;``, piercing the shadow root.
- ``"css=article &gt; .in-the-shadow"`` does not match anything, because ``&lt;div class='in-the-shadow'&gt;`` is not a direct child of ``article``
- ``"css:light=article &gt; .in-the-shadow"`` does not match anything.
- ``"css=article li#target"`` matches the ``&lt;li id='target'&gt;Deep in the shadow&lt;/li&gt;``, piercing two shadow roots.

=== text:light ===

``text`` engine open pierces shadow roots similarly to ``css``, while ``text:light`` does not.
Text engine first searches for elements in the light dom in the iteration order, and then
recursively inside open shadow roots in the iteration order. It does not search inside
closed shadow roots or iframes.

=== id, data-testid, data-test-id, data-test and their :light counterparts ===

Attribute engines are selecting based on the corresponding attribute value.
For example: ``data-test-id=foo`` is equivalent to ``css=[data-test-id="foo"]``,
and ``id:light=foo`` is equivalent to ``css:light=[id="foo"]``.

== Element reference syntax ==

It is possible to get a reference to a Locator by using `Get Element` and `Get Elements` keywords.
Keywords do not save reference to an element in the HTML document, instead it saves reference to a Playwright
[https://playwright.dev/docs/api/class-locator|Locator]. In nutshell Locator captures the logic of how to
retrieve that element from the page. Each time an action is performed, the locator re-searches the elements
in the page. This reference can be used as a *first* part of a selector by using a special selector
syntax `element=`. like this:

| ${ref}=    Get Element    .some_class
|            Click          ${ref} &gt;&gt; .some_child     # Locator searches an element from the page.
|            Click          ${ref} &gt;&gt; .other_child    # Locator searches again an element from the page.

The `.some_child` and `.other_child` selectors in the example are relative to the element referenced
by ${ref}. Please note that frame piercing is not possible with element reference.

= Assertions =

Keywords that accept arguments ``assertion_operator`` &lt;`AssertionOperator`&gt; and ``assertion_expected``
can optionally assert that a specified condition holds. Keywords will return the value even when the
assertion is performed by the keyword.

Assert will retry and fail only after a specified timeout.
See `Importing` and ``retry_assertions_for`` (default is 1 second) for configuring this timeout.



    Currently supported assertion operators are:

    |      = Operator =   |   = Alternative Operators =       |              = Description =                                                       | = Validate Equivalent =              |
    | ``==``              | ``equal``, ``should be``          | Checks if returned value is equal to expected value.                               | ``value == expected``                |
    | ``!=``              | ``inequal``, ``should not be``    | Checks if returned value is not equal to expected value.                           | ``value != expected``                |
    | ``&gt;``               | ``greater than``                  | Checks if returned value is greater than expected value.                           | ``value &gt; expected``                 |
    | ``&gt;=``              |                                   | Checks if returned value is greater than or equal to expected value.               | ``value &gt;= expected``                |
    | ``&lt;``               | ``less than``                     | Checks if returned value is less than expected value.                              | ``value &lt; expected``                 |
    | ``&lt;=``              |                                   | Checks if returned value is less than or equal to expected value.                  | ``value &lt;= expected``                |
    | ``*=``              | ``contains``                      | Checks if returned value contains expected value as substring.                     | ``expected in value``                |
    |                     | ``not contains``                  | Checks if returned value does not contain expected value as substring.             | ``expected in value``                |
    | ``^=``              | ``should start with``, ``starts`` | Checks if returned value starts with expected value.                               | ``re.search(f"^{expected}", value)`` |
    | ``$=``              | ``should end with``, ``ends``     | Checks if returned value ends with expected value.                                 | ``re.search(f"{expected}$", value)`` |
    | ``matches``         |                                   | Checks if given RegEx matches minimum once in returned value.                      | ``re.search(expected, value)``       |
    | ``validate``        |                                   | Checks if given Python expression evaluates to ``True``.                           |                                      |
    | ``evaluate``        |  ``then``                         | When using this operator, the keyword does return the evaluated Python expression. |                                      |

    Currently supported formatters for assertions are:
    |     = Formatter =     |                      = Description =                       |
    |  ``normalize spaces`` | Substitutes multiple spaces to single space from the value |
    |       ``strip``       | Removes spaces from the beginning and end of the value     |
    | ``apply to expected`` | Applies rules also for the expected value                  |

    Formatters are applied to the value before assertion is performed and keywords returns a value where rule is
    applied. Formatter is only applied to the value which keyword returns and not all rules are valid for all assertion
    operators. If ``apply to expected`` formatter is defined, then formatters are then formatter are also applied to
    expected value.
    

By default, keywords will provide an error message if an assertion fails.
Default error messages can be overwritten with a ``message`` argument.
The ``message`` argument accepts `{value}`, `{value_type}`, `{expected}` and
`{expected_type}` [https://docs.python.org/3/library/stdtypes.html#str.format|format]
options.
The `{value}` is the value returned by the keyword and the `{expected}`
is the expected value defined by the user, usually the value in the
``assertion_expected`` argument. The `{value_type}` and
`{expected_type}` are the type definitions from `{value}` and `{expected}`
arguments. In similar fashion as Python
[https://docs.python.org/3/library/functions.html#type|type] returns type definition.
Assertions will retry until ``timeout`` has expired if they do not pass.

The assertion ``assertion_expected`` value is not converted by the library and
is used as is. Therefore when assertion is made, the ``assertion_expected``
argument value and value returned the keyword must have the same type. If types
are not the same, assertion will fail. Example `Get Text` always returns a string
and has to be compared with a string, even the returned value might look like
a number.

Other Keywords have other specific types they return.
`Get Element Count` always returns an integer.
`Get Bounding Box` and `Get Viewport Size` can be filtered.
They return a dictionary without a filter and a number when filtered.
These Keywords do automatic conversion for the expected value if a number is returned.

* &lt; less or greater &gt; With Strings*
Comparisons of strings with ``greater than`` or ``less than`` compares each character,
starting from 0 regarding where it stands in the code page.
Example: ``A &lt; Z``, ``Z &lt; a``, ``ac &lt; dc`
It does never compare the length of elements. Neither lists nor strings.
The comparison stops at the first character that is different.
Examples: ``'abcde' &lt; 'abd'``, ``'100.000' &lt; '2'``
In Python 3 and therefore also in Browser it is not possible to compare numbers
with strings with a greater or less operator.
On keywords that return numbers, the given expected value is automatically
converted to a number before comparison.


The getters `Get Page State` and `Get Browser Catalog` return a dictionary. Values of the dictionary can directly asserted.
Pay attention of possible types because they are evaluated in Python. For example:

| Get Page State    validate    2020 &gt;= value['year']                     # Comparison of numbers
| Get Page State    validate    "IMPORTANT MESSAGE!" == value['message']  # Comparison of strings

== The 'then' or 'evaluate' closure ==

Keywords that accept arguments ``assertion_operator`` and ``assertion_expected``
can optionally also use ``then`` or ``evaluate`` closure to modify the returned value with
BuiltIn Evaluate. Actual value can be accessed with ``value``.

For example ``Get Title  then  'TITLE: '+value``.
See
[https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Evaluating%20expressions|
Builtin Evaluating expressions]
for more info on the syntax.

== Examples ==

| # *Keyword*    *Selector*                    *Key*        *Assertion Operator*    *Assertion Expected*
| Get Title                                           equal                 Page Title
| Get Title                                           ^=                    Page
| Get Style    //*[@id="div-element"]      width      &gt;                     100
| Get Title                                           matches               \\w+\\s\\w+
| Get Title                                           validate              value == "Login Page"
| Get Title                                           evaluate              value if value == "some value" else "something else"


= Implicit waiting =

Browser library and Playwright have many mechanisms to help in waiting for elements.
Playwright will auto-wait before performing actions on elements.
Please see [https://playwright.dev/docs/actionability/ | Auto-waiting on Playwright documentation]
for more information.

On top of Playwright auto-waiting Browser assertions will wait and retry
for specified time before failing any `Assertions`.
Time is specified in Browser library initialization with ``retry_assertions_for``.

Browser library also includes explicit waiting keywords such as `Wait for Elements State`
if more control for waiting is needed.

= Experimental: Re-using same node process =

Browser library integrated nodejs and python. The NodeJS side can be also executed as a standalone process.
Browser libraries running on the same machine can talk to that instead of starting new node processes.
This can speed execution when running tests parallel.
To start node side run on the directory when the Browser package is
``PLAYWRIGHT_BROWSERS_PATH=0 node Browser/wrapper/index.js PORT``.

``PORT`` is the port you want to use for the node process.
To execute tests then with pabot for example do ``ROBOT_FRAMEWORK_BROWSER_NODE_PORT=PORT pabot ..``.

= Scope Setting =

Some keywords which manipulates library settings have a scope argument.
With that scope argument one can set the "live time" of that setting.
Available Scopes are: `Global`, `Suite` and `Test`/`Task`
See `Scope`.
Is a scope finished, this scoped setting, like timeout, will no longer be used.

Live Times:
- A `Global` scope will live forever until it is overwritten by another `Global` scope. Or locally temporarily overridden by a more narrow scope.
- A `Suite` scope will locally override the `Global` scope and live until the end of the Suite within it is set, or if it is overwritten by a later setting with `Global` or same scope. Children suite does inherit the setting from the parent suite but also may have its own local `Suite` setting that then will be inherited to its children suites.
- A `Test` or `Task` scope will be inherited from its parent suite but when set, lives until the end of that particular test or task.

A new set higher order scope will always remove the lower order scope which may be in charge.
So the setting of a `Suite` scope from a test, will set that scope to the robot file suite where that test is and removes the `Test` scope that may have been in place.

= Extending Browser library with a JavaScript module =

Browser library can be extended with JavaScript. The module must be in CommonJS format that Node.js uses.
You can translate your ES6 module to Node.js CommonJS style with Babel. Many other languages
can be also translated to modules that can be used from Node.js. For example TypeScript, PureScript and
ClojureScript just to mention few.

| async function myGoToKeyword(url, args, page, logger, playwright) {
|   logger(args.toString())
|   playwright.coolNewFeature()
|   return await page.goto(url);
| }

Functions can contain any number of arguments and arguments may have default values.

There are some reserved arguments that are not accessible from Robot Framework side.
They are injected to the function if they are in the arguments:

``page``: [https://playwright.dev/docs/api/class-page|the playwright Page object].

``args``: the rest of values from Robot Framework keyword call ``*args``.

``logger``: callback function that takes strings as arguments and writes them to robot log. Can be called multiple times.

``playwright``: playwright module (* from 'playwright'). Useful for integrating with Playwright features that Browser library doesn't support with it's own keywords. [https://playwright.dev/docs/api/class-playwright| API docs]

also argument name ``self`` can not be used.

== Example module.js ==

| async function myGoToKeyword(pageUrl, page) {
|   await page.goto(pageUrl);
|   return await page.title();
| }
| exports.__esModule = true;
| exports.myGoToKeyword = myGoToKeyword;

== Example Robot Framework side ==

| *** Settings ***
| Library   Browser  jsextension=${CURDIR}/module.js
|
| *** Test Cases ***
| Hello
|   New Page
|   ${title}=  myGoToKeyword  https://playwright.dev
|   Should be equal  ${title}  Playwright

Also selector syntax can be extended with a custom selector using a js module

== Example module keyword for custom selector registering ==

| async function registerMySelector(playwright) {
| playwright.selectors.register("myselector", () =&gt; ({
|    // Returns the first element matching given selector in the root's subtree.
|    query(root, selector) {
|       return root.querySelector(`a[data-title="${selector}"]`);
|     },
|
|     // Returns all elements matching given selector in the root's subtree.
|     queryAll(root, selector) {
|       return Array.from(root.querySelectorAll(`a[data-title="${selector}"]`));
|     }
| }));
| return 1;
| }
| exports.__esModule = true;
| exports.registerMySelector = registerMySelector;</doc>
<init source="..\Programs\Python\Python311\Lib\site-packages\Browser\browser.py" lineno="734">
<arguments>
<arg>*deprecated_pos_args</arg>
<arg>auto_closing_level: AutoClosingLevel { SUITE | TEST | MANUAL } = AutoClosingLevel.TEST</arg>
<arg>enable_playwright_debug: bool = False</arg>
<arg>enable_presenter_mode: typing.Union[Browser.utils.data_types.HighLightElement, bool] = False</arg>
<arg>external_browser_executable: typing.Dict[Browser.utils.data_types.SupportedBrowsers, str] = None</arg>
<arg>jsextension: str = None</arg>
<arg>playwright_process_port: int = None</arg>
<arg>retry_assertions_for: timedelta = 0:00:01</arg>
<arg>run_on_failure: str = Take Screenshot  fail-screenshot-{index}</arg>
<arg>selector_prefix: str = None</arg>
<arg>show_keyword_call_banner: bool = None</arg>
<arg>strict: bool = True</arg>
<arg>timeout: timedelta = 0:00:10</arg>
</arguments>
<doc>Browser library can be taken into use with optional arguments:

| =Argument=                        | =Description= |
| ``*deprecated_pos_args``          | Positional arguments are deprecated for Library import. Please use named arguments instead. We will remove positional arguments after RoboCon 2023 Online in March. Old positional order was: ``timeout``, ``enable_playwright_debug``, ``auto_closing_level``, ``retry_assertions_for``, ``run_on_failure``, ``external_browser_executable``, ``jsextension``, ``enable_presenter_mode``, ``playwright_process_port``, ``strict``, ``show_keyword_call_banner``. |
| ``auto_closing_level``            | Configure context and page automatic closing. Default is ``TEST``, for more details, see `AutoClosingLevel` |
| ``enable_playwright_debug``       | Enable low level debug information from the playwright tool. Mainly Useful for the library developers and for debugging purposes. |
| ``enable_presenter_mode``         | Automatic highlights to interacted components, slowMo and a small pause at the end. Can be enabled by giving True or can be customized by giving a dictionary: `{"duration": "2 seconds", "width": "2px", "style": "dotted", "color": "blue"}` Where `duration` is time format in Robot Framework format, defaults to 2 seconds. `width` is width of the marker in pixels, defaults the `2px`. `style` is the style of border, defaults to `dotted`. `color` is the color of the marker, defaults to `blue`. |
| ``external_browser_executable``   | Dict mapping name of browser to path of executable of a browser. Will make opening new browsers of the given type use the set executablePath. Currently only configuring of `chromium` to a separate executable (chrome, chromium and Edge executables all work with recent versions) works. |
| ``jsextension``                   | Path to Javascript module exposed as extra keywords. The module must be in CommonJS. |
| ``playwright_process_port``       | Experimental reusing of playwright process. ``playwright_process_port`` is preferred over environment variable ``ROBOT_FRAMEWORK_BROWSER_NODE_PORT``. See `Experimental: Re-using same node process` for more details. |
| ``retry_assertions_for``          | Timeout for retrying assertions on keywords before failing the keywords. This timeout starts counting from the first failure. Global ``timeout`` will still be in effect. This allows stopping execution faster to assertion failure when element is found fast. |
| ``run_on_failure``                | Sets the keyword to execute in case of a failing Browser keyword. It can be the name of any keyword. If the keyword has arguments those must be separated with two spaces for example ``My keyword \ arg1 \ arg2``. If no extra action should be done after a failure, set it to ``None`` or any other robot falsy value. Run on failure is not applied when library methods are executed directly from Python. |
| ``selector_prefix``                | Prefix for all selectors. This is useful when you need to use add an iframe selector before each selector. |
| ``show_keyword_call_banner``      | If set to ``True``, will show a banner with the keyword name and arguments before the keyword is executed at the bottom of the page. If set to ``False``, will not show the banner. If set to None, which is the default, will show the banner only if the presenter mode is enabled. `Get Page Source` and `Take Screenshot` will not show the banner, because that could negatively affect your test cases/tasks. This feature may be super helpful when you are debugging your tests and using tracing from `New Context` or `Video recording` features. |
| ``strict``                        | If keyword selector points multiple elements and keywords should interact with one element, keyword will fail if ``strict`` mode is true. Strict mode can be changed individually in keywords or by ```et Strict Mode`` keyword. |
| ``timeout``                       | Timeout for keywords that operate on elements. The keywords will wait for this time for the element to appear into the page. Defaults to "10s" =&gt; 10 seconds. |

Old deprecated argument order:
``timeout``, ``enable_playwright_debug``, ``auto_closing_level``, ``retry_assertions_for``, ``run_on_failure``,
``external_browser_executable``, ``jsextension``, ``enable_presenter_mode``, ``playwright_process_port``,
``strict``, ``show_keyword_call_banner``</doc>
</init>
<kw name="Add Cookie" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\cookie.py" lineno="92">
<arguments>
<arg>name: str</arg>
<arg>value: str</arg>
<arg>url: typing.Optional[str] = None</arg>
<arg>domain: typing.Optional[str] = None</arg>
<arg>path: typing.Optional[str] = None</arg>
<arg>expires: typing.Optional[str] = None</arg>
<arg>httpOnly: typing.Optional[bool] = None</arg>
<arg>secure: typing.Optional[bool] = None</arg>
<arg>sameSite: typing.Optional[Browser.utils.data_types.CookieSameSite] = None</arg>
</arguments>
<doc>Adds a cookie to currently active browser context.


| =Arguments= | =Description= |
| ``name`` | Name of the cookie. |
| ``value`` | Given value for the cookie. |
| ``url`` | Given url for the cookie. Defaults to None. Either ``url`` or ``domain`` / ``path`` pair must be set. |
| ``domain`` | Given domain for the cookie. Defaults to None. Either ``url`` or ``domain`` / ``path`` pair must be set. |
| ``path`` | Given path for the cookie. Defaults to None. Either ``url`` or ``domain`` / ``path`` pair must be set. |
| ``expires`` | Given expiry for the cookie. Can be of date format or unix time. Supports the same formats as the [http://robotframework.org/robotframework/latest/libraries/DateTime.html|DateTime] library or an epoch timestamp. - example: 2027-09-28 16:21:35 |
| ``httpOnly`` | Sets the httpOnly token. |
| ``secure`` | Sets the secure token. |
| ``samesite`` | Sets the samesite mode. |

Example:
| `Add Cookie`   foo   bar   http://address.com/path/to/site                                     # Using url argument.
| `Add Cookie`   foo   bar   domain=example.com                path=/foo/bar                     # Using domain and url arguments.
| `Add Cookie`   foo   bar   http://address.com/path/to/site   expiry=2027-09-28 16:21:35        # Expiry as timestamp.
| `Add Cookie`   foo   bar   http://address.com/path/to/site   expiry=1822137695                 # Expiry as epoch seconds.

[https://forum.robotframework.org/t//4233|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Add Style Tag" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\evaluation.py" lineno="159">
<arguments>
<arg>content: str</arg>
</arguments>
<doc>Adds a &lt;style type="text/css"&gt; tag with the content.

| =Arguments= | =Description= |
| ``content`` | Raw CSS content to be injected into frame. |

Example:
| `Add Style Tag`    \#username_field:focus {background-color: aqua;}

[https://forum.robotframework.org/t//4234|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Check Checkbox" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="570">
<arguments>
<arg>selector: str</arg>
<arg>force: bool = False</arg>
</arguments>
<doc>Checks the checkbox or selects radio button found by ``selector``.

| =Arguments= | =Description= |
| ``selector`` | Selector of the checkbox. See the `Finding elements` section for details about the selectors. |
| ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Does nothing if the element is already checked/selected.

[https://forum.robotframework.org/t//4235|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Clear Permissions" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="427">
<arguments>
</arguments>
<doc>Clears all permissions from the current context.

[https://forum.robotframework.org/t//4236|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Clear Text" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="116">
<arguments>
<arg>selector: str</arg>
</arguments>
<doc>Clears the text field found by ``selector``.

| =Arguments= | =Description= |
| ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

See `Type Text` for emulating typing text character by character.
See `Fill Text` for direct filling of the full text at once.

[https://forum.robotframework.org/t//4237|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Click" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="295">
<arguments>
<arg>selector: str</arg>
<arg>button: MouseButton { left | middle | right } = MouseButton.left</arg>
<arg>clickCount: int = 1</arg>
<arg>delay: typing.Optional[datetime.timedelta] = None</arg>
<arg>position_x: typing.Optional[float] = None</arg>
<arg>position_y: typing.Optional[float] = None</arg>
<arg>force: bool = False</arg>
<arg>noWaitAfter: bool = False</arg>
<arg>*modifiers: KeyboardModifier { Alt | Control | Meta | Shift }</arg>
</arguments>
<doc>Simulates mouse click on the element found by ``selector``.

This keyword clicks an element matching ``selector`` by performing the following steps:
- Find an element matches selector. If there is none, wait until a matching element is attached to the DOM.
- Wait for actionability checks on the matched element, unless ``force`` option is set.
  If the element is detached during the checks, the whole action is retried.
- Scroll the element into view if needed.
- Use `Mouse Button` to click in the center of the element, or the specified position.
- Wait for initiated navigation to either succeed or fail, unless ``noWaitAfter`` option is set.


| =Arguments= | =Description= |
| ``selector`` | Selector element to click. See the `Finding elements` section for details about the selectors. |
| ``button`` | Defaults to ``left`` if invalid. |
| ``clickCount`` | Defaults to 1. |
| ``delay`` | Time to wait between mouse-down and mouse-up. Defaults to 0. |
| ``position_x`` | &amp; ``position_y`` A point to click relative to the top-left corner of element bounding-box. Only positive values within the bounding-box are allowed. If not specified, clicks to some visible point of the element. |
| ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |
| ``noWaitAfter`` | Actions that initiate navigation, are waiting for these navigation to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to ``False``. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Example:
| `Click`    id=button_location
| `Click`    \#clickWithOptions    delay=100ms    clickCount=2

``*modifiers``
Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores
current modifiers back. If not specified, currently pressed modifiers are used. Modifiers can be specified
in any order, and multiple modifiers can be specified.
Valid modifier keys are ``Control``, ``Alt``, ``Shift`` and ``Meta``.
Due to the fact that the argument `*modifiers` is a positional only argument,
all preceding keyword arguments have to be specified as positional arguments before `*modifiers`.

Example:
| `Click`    id=clickWithModifiers    left    1    None    None    None    False    False    Alt    Meta    Shift
| `Click`    id=clickWithModifier    right    2    None    None    None    False    False    Shift

[https://forum.robotframework.org/t/comments-for-click/4238|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Close Browser" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="114">
<arguments>
<arg>browser: typing.Union[Browser.utils.data_types.SelectionType, str] = CURRENT</arg>
</arguments>
<doc>Closes the current browser.

Active browser is set to the browser that was active before this one. Closes all context and pages belonging
to this browser. See `Browser, Context and Page` for more information about Browser and
related concepts.


| =Argument=  | =Description= |
| ``browser`` | Browser to close. ``CURRENT`` selects the active browser. ``ALL`` closes all browsers. When a browser id is provided, that browser is closed. |



Example:
| `Close Browser`    ALL        # Closes all browsers
| `Close Browser`    CURRENT    # Close current browser
| `Close Browser`               # Close current browser
| `Close Browser`    ${id}      # Close browser matching id

[https://forum.robotframework.org/t//4239|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Close Context" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="151">
<arguments>
<arg>context: typing.Union[Browser.utils.data_types.SelectionType, str] = CURRENT</arg>
<arg>browser: typing.Union[Browser.utils.data_types.SelectionType, str] = CURRENT</arg>
</arguments>
<doc>Closes a Context.

Active context is set to the context that was active before this one. Closes pages belonging to this context.
See `Browser, Context and Page` for more information about Context and related concepts.

| =Argument=  | =Description= |
| ``context`` | Context to close. ``CURRENT`` selects the active context. ``ALL`` closes all contexts. When a context id is provided, that context is closed. |
| ``browser`` | Browser where to close context. ``CURRENT`` selects the active browser. ``ALL`` closes all browsers. When a browser id is provided, that browser is closed. |

Example:
| `Close Context`                          #  Closes current context and current browser
| `Close Context`    CURRENT    CURRENT    #  Closes current context and current browser
| `Close Context`    ALL        CURRENT    #  Closes all context from current browser and current browser
| `Close Context`    ALL        ALL        #  Closes all context from current browser and all browser

[https://forum.robotframework.org/t//4240|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Close Page" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="214">
<arguments>
<arg>page: typing.Union[Browser.utils.data_types.SelectionType, str] = CURRENT</arg>
<arg>context: typing.Union[Browser.utils.data_types.SelectionType, str] = CURRENT</arg>
<arg>browser: typing.Union[Browser.utils.data_types.SelectionType, str] = CURRENT</arg>
</arguments>
<doc>Closes the ``page`` in ``context`` in ``browser``.

Defaults to current for all three. Active page is set to the page that was active before this one.
See `Browser, Context and Page` for more information about Page and related concepts.


| =Argument=  | =Description= |
| ``page``    | Page to close. ``CURRENT`` selects the active page. ``ALL`` closes all pages. When a page id is provided, that page is closed. |
| ``context`` | Context where to close page. ``CURRENT`` selects the active context. ``ALL`` closes all contexts. When a context id is provided, that context is closed. |
| ``browser`` | Browser where to close page. ``CURRENT`` selects the active browser. ``ALL`` closes all browsers. When a browser id is provided, that browser is closed. |

Returns a list of dictionaries containing id, errors and console messages from the page.

Example
| `Close Page`                                       # Closes current page, within the current context and browser
| `Close Page`    CURRENT     CURRENT     CURRENT    # Closes current page, within the current context and browser
| `Close Page`    ALL         ALL         ALL        # Closes all pages, within all contexts and browsers

[https://forum.robotframework.org/t//4241|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Connect To Browser" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="295">
<arguments>
<arg>wsEndpoint: str</arg>
<arg>browser: SupportedBrowsers { chromium | firefox | webkit } = SupportedBrowsers.chromium</arg>
</arguments>
<doc>Connect to a playwright Browser.

See `Browser, Context and Page` for more information about Browser and related concepts.

Returns a stable identifier for the connected browser.

| =Argument=     | =Description= |
| ``wsEndpoint`` | Address to connect to. |
| ``browser``    | Opens the specified browser. Defaults to ``chromium``. |

[https://forum.robotframework.org/t//4242|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Crawl Site" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\crawling.py" lineno="14">
<arguments>
<arg>url: typing.Optional[str] = None</arg>
<arg>page_crawl_keyword=take_screenshot</arg>
<arg>max_number_of_page_to_crawl: int = 1000</arg>
<arg>max_depth_to_crawl: int = 50</arg>
</arguments>
<doc>Web crawler is a tool to go through all the pages on a specific URL domain.
This happens by finding all links going to the same site and opening those.

returns list of crawled urls.

| =Arguments= | =Description= |
| ``url`` | is the page to start crawling from. |
| ``page_crawl_keyword`` | is the keyword that will be executed on every page.  By default it will take a screenshot on every page. |
| ``max_number_of_page_to_crawl`` | is the upper limit of pages to crawl. Crawling will stop if the number of crawled pages goes over this. |
| ``max_depth_to_crawl`` | is the upper limit of consecutive links followed from the start page. Crawling will stop if there are no more links under this depth. |

[https://forum.robotframework.org/t//4243|Comment &gt;&gt;]</doc>
<tags>
<tag>Crawling</tag>
</tags>
</kw>
<kw name="Delete All Cookies" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\cookie.py" lineno="146">
<arguments>
</arguments>
<doc>Deletes all cookies from the currently active browser context.

[https://forum.robotframework.org/t//4244|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Deselect Options" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="683">
<arguments>
<arg>selector: str</arg>
</arguments>
<doc>Deselects all options from select element found by ``selector``.

| =Arguments= | =Description= |
| ``selector`` | Selector of the select tag. See the `Finding elements` section for details about the selectors. |

If you just want to select one or more specific options and
currently more options are selected, use `Select Options By`
keyword with the options to be selected in the end.

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

[https://forum.robotframework.org/t//4245|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Download" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\evaluation.py" lineno="175">
<arguments>
<arg>url: str</arg>
</arguments>
<doc>Download given url content.

Keyword returns dictionary which contains downloaded file path
and suggested filename as keys (saveAs and suggestedFilename).
If the file URL cannot be found (the download is triggered by event handlers)
use `Wait For Download`keyword.

To enable downloads context's ``acceptDownloads`` needs to be true.

To configure download directory use New Browser's ``downloadsPath`` settings

With default filepath downloaded files are deleted when Context the download happened in is closed.

This keyword requires that there is currently an open page. The keyword uses
the current pages local state (cookies, sessionstorage, localstorage) for the
download to avoid authentication problems.

Example:
| ${file_object}=    `Download`    ${url}
| ${actual_size}=    Get File Size    ${file_object.saveAs}

Example 2:
| ${elem}=          Get Element   text="Download File"
| ${href}=          Get Property  ${elem}  href
| ${file_object}=   Download  ${href}
| ${file_path}=     Set Variable  ${file_object.saveAs}

[https://forum.robotframework.org/t//4246|Comment &gt;&gt;]</doc>
<tags>
<tag>Page Content</tag>
</tags>
</kw>
<kw name="Drag And Drop" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="894">
<arguments>
<arg>selector_from: str</arg>
<arg>selector_to: str</arg>
<arg>steps: int = 1</arg>
</arguments>
<doc>Executes a Drag&amp;Drop operation from the element selected by ``selector_from``
to the element selected by ``selector_to``.

| =Arguments= | =Description= |
| ``selector_from`` | Identifies the element, which center is the start-point. |
| ``selector_to`` | Identifies the element, which center is the end-point. |
| ``steps`` | Defines how many intermediate mouse move events are sent. Often it is nessesary to send more than one intermediate event to get the desired result. Defaults to 1. |

See the `Finding elements` section for details about the selectors.

First it moves the mouse to the start-point,
then presses the left mouse button,
then moves to the end-point in specified number of steps,
then releases the mouse button.

Start- and end-point are defined by the center of the elements boundingbox.

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Example
| `Drag And Drop`    "Circle"    "Goal"

[https://forum.robotframework.org/t//4247|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Drag And Drop By Coordinates" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="933">
<arguments>
<arg>from_x: float</arg>
<arg>from_y: float</arg>
<arg>to_x: float</arg>
<arg>to_y: float</arg>
<arg>steps: int = 1</arg>
</arguments>
<doc>Executes a Drag&amp;Drop operation from a coordinate to another coordinate.

First it moves the mouse to the start-point,
then presses the left mouse button,
then moves to the end-point in specified number of steps,
then releases the mouse button.

Start- and end-point are defined by ``x`` and ``y`` coordinates relative to
the top left corner of the pages viewport.

| ``from_x`` &amp; ``from_y`` | Identify the start-point on page. |
| ``to_x`` &amp; ``to_y`` | Identify the end-point. |
| ``steps`` | Defines how many intermediate mouse move events are sent. Often it is nessesary to send more than one intermediate event to get the desired result. Defaults to 1. |

Example:
| `Drag And Drop By Coordinates`
| ...    from_x=30    from_y=30
| ...    to_x=10    to_y=10    steps=20

[https://forum.robotframework.org/t//4248|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Drag And Drop Relative To" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="967">
<arguments>
<arg>selector_from: str</arg>
<arg>x: float = 0.0</arg>
<arg>y: float = 0.0</arg>
<arg>steps: int = 1</arg>
</arguments>
<doc>Executes a Drag&amp;Drop operation from the element selected by ``selector_from``
to coordinates relative to the center of that element.

This keyword can be handy to simulate swipe actions.

| =Arguments= | =Description= |
| ``selector_from`` | identifies the element, which center is the start-point. |
| ``x`` &amp; ``y`` | identifies the end-point which is relative to the start-point. |
| ``steps`` | defines how many intermediate mouse move events are sent. Often it is nessesary to send more than one intermediate event to get the desired result. Defaults to 1. |

See the `Finding elements` section for details about the selectors.

First it moves the mouse to the start-point (center of boundingbox),
then presses the left mouse button,
then moves to the relative position with the given intermediate steps,
then releases the mouse button.

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Example
| `Drag And Drop Relative to`    "Circle"    -20    0     # Slides the element 20 pixel to the left

[https://forum.robotframework.org/t//4249|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Eat All Cookies" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\cookie.py" lineno="156">
<arguments>
</arguments>
<doc>Eat all cookies for all easter.

[https://forum.robotframework.org/t//4250|Comment &gt;&gt;]</doc>
</kw>
<kw name="Evaluate JavaScript" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\evaluation.py" lineno="66">
<arguments>
<arg>selector: typing.Optional[str] = None</arg>
<arg>*function: str</arg>
<arg>arg: Any = None</arg>
<arg>all_elements: bool = False</arg>
</arguments>
<doc>Executes given javascript on the selected element(s) or on page.

| =Arguments= | =Description= |
| ``selector`` | Selector to resolve and pass to the JavaScript function. This will be the first argument the function receives if not ``${None}``. ``selector`` is optional and can be omitted. If given a selector, a function is necessary, with an argument to capture the elementHandle. For example ``(element) =&gt; document.activeElement === element`` See the `Finding elements` section for details about the selectors. |
| ``*function`` | A valid javascript function or a javascript function body. These arguments can be used to write readable multiline JavaScript. |
| ``arg`` | an additional argument that can be handed over to the JavaScript function. This argument must be JSON serializable. ElementHandles are not supported. |
| ``all_elements`` | defines if only the single elementHandle found by ``selector`` is handed over to the function or if set to ``True`` all found elements are handed over as array. |

Example with ``all_elements=True``:
|  ${texts}=    Evaluate JavaScript    button
|  ...    (elements, arg) =&gt; {
|  ...        let text = []
|  ...            for (e of elements) {
|  ...                console.log(e.innerText)
|  ...                text.push(e.innerText)
|  ...            }
|  ...        text.push(arg)
|  ...        return text
|  ...    }
|  ...    all_elements=True
|  ...    arg=Just another Text

Keyword uses strict mode if ``all_elements`` is ``False``. See `Finding elements` for more details
about strict mode.

[https://github.com/MarketSquare/robotframework-browser/tree/main/atest/test/06_Examples/js_evaluation.robot | Usage examples. ]

[https://forum.robotframework.org/t//4251|Comment &gt;&gt;]</doc>
<tags>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Execute JavaScript" deprecated="true" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\evaluation.py" lineno="28">
<arguments>
<arg>function: str</arg>
<arg>selector: str = </arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Evaluate JavaScript` instead. This keyword will be removed end of 2022.

Executes given javascript on the page.

| =Arguments= | =Description= |
| ``function`` | A valid javascript function or a javascript function body. For example ``() =&gt; true`` and ``true`` will behave similarly. |
| ``selector`` | Selector to resolve and pass to the JavaScript function. This will be the first argument the function receives. If given a selector a function is necessary, with an argument to capture the elementhandle. For example ``(element) =&gt; document.activeElement === element`` See the `Finding elements` section for details about the selectors. |

Same functionality can be replaced with newer ``Evaluate JavaScript`` Keyword:
| -    Execute JavaScript    (elem) =&gt; elem.innerText = "abc"    h1
| +    Evaluate JavaScript    h1    (elem) =&gt; elem.innerText = "abc"

Example for replacement without Selector:
| -    Execute JavaScript    () =&gt; document.location.hostname
| +    Evaluate JavaScript    ${None}    () =&gt; document.location.hostname

Keyword uses strict mode if selector is defined. See `Finding elements` for more details
about strict mode.

[https://github.com/MarketSquare/robotframework-browser/tree/main/atest/test/06_Examples/js_evaluation.robot | Usage examples. ]

[https://forum.robotframework.org/t//4252|Comment &gt;&gt;]</doc>
<tags>
<tag>Getter</tag>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Fill Secret" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="203">
<arguments>
<arg>selector: str</arg>
<arg>secret: str</arg>
<arg>force: bool = False</arg>
</arguments>
<doc>Fills the given secret from ``variable_name`` into the
text field found by ``selector``.


| =Arguments= | =Description= |
| ``secret`` | The secret string that should be filled into the text field. |
| ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |
| ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |


This keyword does not log secret in Robot Framework logs, when
keyword resolves the ``secret`` variable internally.
When ``secret`` variable is prefixed with `$`, without the curly braces,
library will resolve the corresponding Robot Framework variable.

If ``secret`` variable is prefixed with `%`, library will resolve
corresponding environment variable. Example `$Password`` will
resolve to ``${Password}`` Robot Framework variable.
Also ``%ENV_PWD`` will resolve to ``%{ENV_PWD}`` environment variable.

Using normal Robot Framework variables will also work,

*Normal plain text will not work. For now, it will just create warnings.*
*In the future this keyword will fail with plain text.*
If you want to use plain text, use `Fill Text` keyword instead.

If ``enable_playwright_debug`` is enabled in the library import,
secret will be always visible as plain text in the playwright debug
logs, regardless of the Robot Framework log level.

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

See `Fill Text` for other details.

Example:
| `Fill Secret`    input#username_field    $username    # Keyword resolves variable value from Robot Framework variables
| `Fill Secret`    input#username_field    %username    # Keyword resolves variable value from environment variables

[https://forum.robotframework.org/t//4253|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Fill Text" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="86">
<arguments>
<arg>selector: str</arg>
<arg>txt: str</arg>
<arg>force: bool = False</arg>
</arguments>
<doc>Clears and fills the given ``txt`` into the text field found by ``selector``.

This method waits for an element matching the ``selector`` to appear,
waits for actionability checks, focuses the element, fills it and
triggers an input event after filling.

If the element matching selector is not an &lt;input&gt;, &lt;textarea&gt; or
[contenteditable] element, this method throws an error. Note that
you can pass an empty string as ``txt`` to clear the input field.


| =Arguments= | =Description= |
| ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |
| ``txt`` | Text for the text field. |
| ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

See `Type Text` for emulating typing text character by character.

Example:
| `Fill Text`    css=input#username_field    username

[https://forum.robotframework.org/t//4254|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Focus" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="454">
<arguments>
<arg>selector: str</arg>
</arguments>
<doc>Moves focus on to the element found by ``selector``.

| =Arguments= | =Description= |
| ``selector`` | Selector of the element. See the `Finding elements` section for details about the selectors. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

If there's no element matching selector, the method waits until a
matching element appears in the DOM. Timeouts after 10 seconds.

[https://forum.robotframework.org/t//4255|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Get Attribute" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="290">
<arguments>
<arg>selector: str</arg>
<arg>attribute: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the HTML ``attribute`` of the element found by ``selector``.

| =Arguments= | =Description= |
| ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |
| ``attribute`` | Requested attribute name. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the state |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that the attribute value matches the expected value. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

When a attribute is selected that is not present and no assertion operator is set,
the keyword fails. If an assertion operator is set and the attribute is not present,
the returned value is ``None``. This can be used to assert check the presents or
the absents of an attribute.

Example Element:
| &lt;button class="login button active" id="enabled_button" something&gt;Login&lt;/button&gt;

Example Code:
| `Get Attribute`   id=enabled_button    disabled                   # FAIL =&gt; "Attribute 'disabled' not found!"
| `Get Attribute`   id=enabled_button    disabled     ==    ${None}     # PASS =&gt; returns: None
| `Get Attribute`   id=enabled_button    something    evaluate    value is not None    # PASS =&gt;  returns: True
| `Get Attribute`   id=enabled_button    disabled     evaluate    value is None        # PASS =&gt;  returns: True

[https://forum.robotframework.org/t//4256|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Attribute Names" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="353">
<arguments>
<arg>selector: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>*assertion_expected</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns all HTML attribute names of an element as a list.


| =Arguments= | =Description= |
| ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``*assertion_expected`` | Expected value for the state |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that attribute names do match to the expected value. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

Available assertions:
- ``==`` and ``!=`` can work with multiple values
- ``contains`` / ``*=`` only accepts one single expected value

Other operators are not allowed.

Example:
| `Get Attribute Names`    [name="readonly_input"]    ==    type    name    value    readonly    # Has exactly these attribute names.
| `Get Attribute Names`    [name="readonly_input"]    contains    disabled    # Contains at least this attribute name.

[https://forum.robotframework.org/t//4257|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get BoundingBox" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="991">
<arguments>
<arg>selector: str</arg>
<arg>key: BoundingBoxFields { width | height | x | y | ALL } = BoundingBoxFields.ALL</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Gets elements size and location as an object ``{x: float, y: float, width: float, height: float}``.


| =Arguments= | =Description= |
| ``selector`` | Selector from which shall be retrieved. See the `Finding elements` section for details about the selectors. |
| ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the BoundingBox as Dictionary, otherwise it will just return the single value selected by the key. Note: If a single value is retrieved, an assertion does *not* need a ``validate`` combined with a cast of ``value``. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the counting |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that the value matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

Example use:
| ${bounding_box}=    `Get BoundingBox`    id=element                 # unfiltered
| Log                 ${bounding_box}                                 # {'x': 559.09375, 'y': 75.5, 'width': 188.796875, 'height': 18}
| ${x}=               `Get BoundingBox`    id=element    x            # filtered
| Log                 X: ${x}                                         # X: 559.09375
| # Assertions:
| `Get BoundingBox`     id=element         width         &gt;    180
| `Get BoundingBox`     id=element         ALL           validate    value['x'] &gt; value['y']*2

[https://forum.robotframework.org/t//4258|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Browser Catalog" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="903">
<arguments>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns all browsers, open contexts in them and open pages in these contexts.

See `Browser, Context and Page` for more information about these concepts.

| =Arguments= | =Description= |
| assertion_operator | Optional assertion operator. See `Assertions` for more information. |
| assertion_expected | Optional expected value. See `Assertions` for more information. |
| message            | Optional custom message to use on failure. See `Assertions` for more information. |

The data is parsed into a python list containing data representing the open Objects.

On the root level the data contains a list of open browsers.

Data can be manipulated also with ``assertion_operator`` for example to find
a specific id based on index or page title with ``then`` operator.

Return value can also be asserted against expected value.

Sample:
| [
|   {
|     "type": "chromium",
|     "id": "browser=96207191-8147-44e7-b9ac-5e04f2709c1d",
|     "contexts": [
|       {
|         "type": "context",
|         "id": "context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089",
|         "activePage": "page=f90c97b8-eaaf-47f2-98b2-ccefd3450f12",
|         "pages": [
|           {
|             "type": "page",
|             "title": "Robocorp",
|             "url": "https://robocorp.com/",
|             "id": "page=7ac15782-22d2-48b4-8591-ff17663fa737",
|             "timestamp": 1598607713.858
|           },
|           {
|             "type": "page",
|             "title": "Home - Reaktor",
|             "url": "https://www.reaktor.com/",
|             "id": "page=f90c97b8-eaaf-47f2-98b2-ccefd3450f12",
|             "timestamp": 1598607714.702
|           }
|         ]
|       }
|     ],
|     "activeContext": "context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089",
|     "activeBrowser": false
|   },
|   {
|     "type": "firefox",
|     "id": "browser=ad99abac-17a9-472b-ac7f-d6352630834e",
|     "contexts": [
|       {
|         "type": "context",
|         "id": "context=bc64f1ba-5e76-46dd-9735-4bd344afb9c0",
|         "activePage": "page=8baf2991-5eaf-444d-a318-8045f914e96a",
|         "pages": [
|           {
|             "type": "page",
|             "title": "Software-Qualitätssicherung und Softwaretest",
|             "url": "https://www.imbus.de/",
|             "id": "page=8baf2991-5eaf-444d-a318-8045f914e96a",
|             "timestamp": 1598607716.828
|           }
|         ]
|       }
|     ],
|     "activeContext": "context=bc64f1ba-5e76-46dd-9735-4bd344afb9c0",
|     "activeBrowser": true
|   }
| ]

[https://forum.robotframework.org/t//4259|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>BrowserControl</tag>
<tag>Getter</tag>
</tags>
</kw>
<kw name="Get Browser Ids" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="1160">
<arguments>
<arg>browser: SelectionType { CURRENT | ACTIVE | ALL | ANY } = ALL</arg>
</arguments>
<doc>Returns a list of ids from open browsers.
See `Browser, Context and Page` for more information about Browser and related concepts.


``browser`` Defaults to ``ALL``
- ``ALL`` / ``ANY`` Returns all ids as a list.
- ``ACTIVE`` / ``CURRENT`` Returns the id of the currently active browser as list.

| =Arguments= | =Description= |
| ``browser`` | The browser to get the ids from. ``ALL`` for all open browsers, ``ACTIVE`` for the currently active browser or the id of the browser to get the ids from. |

The ACTIVE browser is a synonym for the CURRENT Browser.

[https://forum.robotframework.org/t//4260|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Getter</tag>
</tags>
</kw>
<kw name="Get Checkbox State" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="570">
<arguments>
<arg>selector: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: typing.Union[bool, str] = Unchecked</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the state of the checkbox found by ``selector``.


Optionally asserts that the state matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

| =Arguments= | =Description= |
| ``selector`` | Selector which shall be examined. See the `Finding elements` section for details about the selectors. |
| ``assertion_operator`` | ``==`` and ``!=`` and equivalent are allowed on boolean values. Other operators are not accepted. |
| ``assertion_expected`` | Boolean value of expected state. Strings are interpreted as booleans. All strings are ``${True}`` except of the following `FALSE, NO, OFF, 0, UNCHECKED, NONE, ${EMPTY}`` (case-insensitive). Defaults to unchecked. |
| ``message`` | overrides the default error message for assertion. |

- ``checked`` =&gt; ``True``
- ``unchecked`` =&gt; ``False``

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Example:
| `Get Checkbox State`    [name=can_send_email]    ==    checked

[https://forum.robotframework.org/t//4261|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Classes" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="399">
<arguments>
<arg>selector: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>*assertion_expected</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns all classes of an element as a list.


| =Arguments= | =Description= |
| ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``*assertion_expected`` | Expected values for the state |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that the value matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

Available assertions:
- ``==`` and ``!=`` can work with multiple values
- ``contains`` / ``*=`` only accepts one single expected value

Other operators are not allowed.

Example:
| `Get Classes`    id=draggable    ==    react-draggable    box    # Element contains exactly this class name.
| `Get Classes`    id=draggable    validate    "react-draggable-dragged" not in value    # Element does not contain react-draggable-dragged class.

[https://forum.robotframework.org/t//4262|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Client Size" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="1169">
<arguments>
<arg>selector: typing.Optional[str] = None</arg>
<arg>key: SizeFields { width | height | ALL } = SizeFields.ALL</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Gets elements or pages client size (``clientHeight``, ``clientWidth``) as object {width: float, height: float}.


| =Arguments= | =Description= |
| ``selector`` | Optional selector from which shall be retrieved. If no selector is given the client size of the page itself is used (``document.scrollingElement``). See the `Finding elements` section for details about the selectors. |
| ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the scroll size as dictionary, otherwise it will just return the single value selected by the key. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the counting |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that the value matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

See `Get BoundingBox` or `Get Scroll Size` for examples.

[https://forum.robotframework.org/t//4263|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Context Ids" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="1185">
<arguments>
<arg>context: SelectionType { CURRENT | ACTIVE | ALL | ANY } = ALL</arg>
<arg>browser: SelectionType { CURRENT | ACTIVE | ALL | ANY } = ALL</arg>
</arguments>
<doc>Returns a list of context ids based on the browser selection.
See `Browser, Context and Page` for more information about Context and related concepts.

``ALL`` and ``ANY`` are synonyms.
``ACTIVE`` and ``CURRENT`` are also synonyms.

| =Arguments= | =Description= |
| ``context`` | The context to get the ids from. ``ALL`` will return all ids from selected browser(s), ``ACTIVE`` for the one active context of each selected browser. |
| ``browser`` | The browser to get the context ids from. ``ALL`` Context ids from all open browsers shall be fetched. ``ACTIVE`` Only context ids from the active browser shall be fetched. |

The ACTIVE context of the ACTIVE Browser is the ``Current`` Context.

[https://forum.robotframework.org/t//4264|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Getter</tag>
</tags>
</kw>
<kw name="Get Cookie" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\cookie.py" lineno="175">
<arguments>
<arg>cookie: str</arg>
<arg>return_type: CookieType { dictionary | dict | string | str } = CookieType.dictionary</arg>
</arguments>
<doc>Returns information of cookie with ``name`` as a Robot Framework dot dictionary or a string.

| =Arguments= | =Description= |
| ``cookie`` | Name of the cookie to be retrieved. |
| ``return_type`` | Type of the return value. Can be either ``dictionary`` or ``string``. Defaults to ``dictionary``. |

If ``return_type`` is ``dictionary`` or ``dict`` then keyword returns a of Robot Framework
[https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#accessing-list-and-dictionary-items|dot dictionary]
The dictionary contains all possible key value pairs of the cookie. If ``return_type`` is ``string`` or ``str``,
then keyword returns the cookie as a string in format: ``name1=value1``. The return value contains only
``name`` and ``value`` keys of the cookie.

If no cookie is found with ``name`` keyword fails. The cookie dictionary contains
details about the cookie. Keys available in the dictionary are documented in the table below.

| *Value*  | *Explanation*                                                                              |
| name     | The name of a cookie, mandatory.                                                           |
| value    | Value of the cookie, mandatory.                                                            |
| url      | Define the scope of the cookie, what URLs the cookies should be sent to.                   |
| domain   | Specifies which hosts are allowed to receive the cookie.                                   |
| path     | Indicates a URL path that must exist in the requested URL, for example `/`.                |
| expiry   | Lifetime of a cookie. Returned as datatime object or None if not valid time received.      |
| httpOnly | When true, the cookie is not accessible via JavaScript.                                    |
| secure   | When true, the cookie is only used with HTTPS connections.                                 |
| sameSite | Attribute lets servers require that a cookie shouldn't be sent with cross-origin requests. |

See
[https://playwright.dev/docs/api/class-browsercontext#browsercontextaddcookiescookies|playwright documentation]
for details about each attribute.

Example:
| ${cookie}=        `Get Cookie`              Foobar
| Should Be Equal   ${cookie.value}           Tidii
| Should Be Equal   ${cookie.expiry.year}     ${2020}

[https://forum.robotframework.org/t//4265|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Getter</tag>
</tags>
</kw>
<kw name="Get Cookies" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\cookie.py" lineno="29">
<arguments>
<arg>return_type: CookieType { dictionary | dict | string | str } = CookieType.dictionary</arg>
</arguments>
<doc>Returns cookies from the current active browser context.

If ``return_type`` is ``dictionary`` or ``dict`` then keyword returns list of Robot Framework
[https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#accessing-list-and-dictionary-items|dot dictionaries]
The dictionary contains all possible key value pairs of the cookie. See `Get Cookie` keyword documentation
about the dictionary keys and values.

If ``return_type`` is ``string`` or ``str``, then keyword returns the cookie as a string in format:
``name1=value1; name2=value2; name3=value3``. The return value contains only ``name`` and ``value`` keys of the
cookie.

[https://forum.robotframework.org/t//4266|Comment &gt;&gt;]</doc>
<tags>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Device" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\device_descriptors.py" lineno="40">
<arguments>
<arg>name: str</arg>
</arguments>
<doc>Get a single device descriptor with name exactly matching name.

| =Arguments= | =Description= |
| ``name`` | Given name of the requested device. See Playwright's [https://github.com/microsoft/playwright/blob/master/packages/playwright-core/src/server/deviceDescriptorsSource.json|deviceDescriptorsSource.json] for a formatted list. |

Allows a concise syntax to set website testing values to exact matches of specific
mobile devices.

Use by passing to a context. After creating a context with devicedescriptor,
before using ensure your active page is on that context.
Usage:

| ${device}=          `Get Device`       iPhone X
| `New Context`         &amp;{device}
| `New Page`
| `Get Viewport Size`   # returns { "width": 375, "height": 812 }

[https://forum.robotframework.org/t//4267|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Getter</tag>
</tags>
</kw>
<kw name="Get Devices" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\device_descriptors.py" lineno="25">
<arguments>
</arguments>
<doc>Returns a dict of all playwright device descriptors.

See Playwright's
[https://github.com/microsoft/playwright/blob/master/packages/playwright-core/src/server/deviceDescriptorsSource.json|deviceDescriptorsSource.json]
for a formatted list.

[https://forum.robotframework.org/t//4268|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Getter</tag>
</tags>
</kw>
<kw name="Get Element" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="867">
<arguments>
<arg>selector: str</arg>
</arguments>
<doc>Returns a reference to a Playwright [https://playwright.dev/docs/api/class-locator|Locator].

The reference can be used in subsequent selectors.


| =Arguments= | =Description= |
| ``selector`` | Selector from which shall be retrieved . See the `Finding elements` section for details about the selectors. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Example:
| ${element} =    `Get Element`    \#username_field
| ${option_value} =    `Get Property`    ${element} &gt;&gt; optionOne    value    # Locator is resolved from the page.
| ${option_value} =    `Get Property`    ${element} &gt;&gt; optionTwo    value    # Locator is resolved again from the page.

[https://forum.robotframework.org/t/comments-for-get-element/4269|Comment &gt;&gt;]</doc>
<tags>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Element Count" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="622">
<arguments>
<arg>selector: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: typing.Union[int, str] = 0</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the count of elements found with ``selector``.

| =Arguments= | =Description= |
| ``selector`` | Selector which shall be counted. See the `Finding elements` section for details about the selectors. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the counting |
| ``message`` | overrides the default error message for assertion. |

Optionally asserts that the state matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

Example:
| `Get Element Count`    label    &gt;    1

[https://forum.robotframework.org/t//4270|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Element State" deprecated="true" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="1222">
<arguments>
<arg>selector: str</arg>
<arg>state: ElementState { attached | detached | visible | ... } = 4</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: typing.Optional[str] = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>*DEPRECATED!!* Use keyword `Get Element States` instead. This keyword will be removed end of 2022.

Get the given state from the element found by ``selector``.

Refactoring example assertion:
| -    `Get Element State`    h1    readonly    ==    False
| +    `Get Element States`    h1    not contains    readonly

 Refactoring example asserting multiple states:
| -    `Get Element State`    id=password    visible    ==    True
| -    `Get Element State`    id=password    readonly    ==    False
| -    `Get Element State`    id=password    disabled    ==    False
| +    `Get Element States`    h1    contains    visible    editable    enabled

Refactoring example for getting state:
| -    ${visibility}    `Get Element State`    h1    visible
| +    ${visibility}    `Get Element States`    h1    then    bool(value &amp; visible)  # Returns ``${True}`` if element is visible.


If the selector does satisfy the expected state it will return ``True`` otherwise ``False``.

``selector`` Selector of the corresponding object. See the `Finding elements` section for details about the selectors.

``state`` Defaults to visible. Possible states are

``assertion_operator`` See `Assertions` for further details. Defaults to None.

``assertion_expected`` Expected value for the counting

``message`` overrides the default error message for assertion.

Note that element must be attached to DOM to be able to fetch the state of ``readonly`` , ``selected`` and ``checked``.
The other states are false if the requested element is not attached.

Note that element without any content or with display:none has an empty bounding box
and is not considered visible.

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that the state matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

Example:
| `Get Element State`    h1    readonly    ==    False

[https://forum.robotframework.org/t//4271|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Element States" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="1295">
<arguments>
<arg>selector: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>*assertion_expected: typing.Union[Browser.utils.data_types.ElementState, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>return_names=True</arg>
</arguments>
<doc>Get the active states from the element found by ``selector``.

This Keyword returns a list of states that are valid for the selected element.


| =Arguments= | =Description= |
| ``selector`` | Selector of the corresponding object. See the `Finding elements` section for details about the selectors. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``*assertion_expected`` | Expected states |
| ``message`` | overrides the default error message for assertion. |
| ``return_names`` | If set to ``False`` the keyword does return an IntFlag object instead of a list. Defaults to ``True``. |

Optionally asserts that the state matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default, assertion
is not done.

This keyword internally works with Python IntFlag.
Flags can be processed using bitwise operators like &amp; (bitwise AND) and | (bitwise OR).
When using the assertion operators ``then``, ``evaluate`` or ``validate`` the ``value``
contain the states as `ElementState`.

Example:
| `Get Element States`    h1    validate    value &amp; visible   # Fails in case of an invisible element
| `Get Element States`    h1    then    value &amp; (visible | hidden)  # Returns either ``['visible']`` or ``['hidden']``
| `Get Element States`    h1    then    bool(value &amp; visible)  # Returns ``${True}`` if element is visible

The most typical use case would be to verify if an element contains a specific state or multiple states.

Example:
| `Get Element States`    id=checked_elem      *=    checked
| `Get Element States`    id=checked_elem      not contains    checked
| `Get Element States`    id=invisible_elem    contains    hidden    attached
| `Get Element States`    id=disabled_elem     contains    visible    disabled    readonly

Elements do return the positive and negative values if applicable.
As example, a checkbox does return either ``checked`` or ``unchecked`` while a text input
element has none of those two states.
Select elements have also either ``selected`` or ``unselected``.

The state of ``animating`` will be set if an element is not considered ``stable``
within 300 ms.

If an element is not attached to the dom, so it can not be found within 250ms
it is marked as ``detached`` as the only state.

``stable`` state is not returned, because it would cause too high delay in that keyword.

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

[https://forum.robotframework.org/t/comments-for-get-element-states/4272|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Elements" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="894">
<arguments>
<arg>selector: str</arg>
</arguments>
<doc>Returns a reference to Playwright [https://playwright.dev/docs/api/class-locator|Locator]
for all matched elements by ``selector``.


| =Arguments= | =Description= |
| ``selector`` | Selector from which shall be retrieved. See the `Finding elements` section for details about the selectors. |

Example:
| ${elements} =    `Get Elements`
| ${elem} =    Get From List    ${elements}    0
| ${option_value} =    `Get Property`    ${elem} &gt;&gt; option    value

[https://forum.robotframework.org/t//4273|Comment &gt;&gt;]</doc>
<tags>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Page Ids" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="1228">
<arguments>
<arg>page: SelectionType { CURRENT | ACTIVE | ALL | ANY } = ALL</arg>
<arg>context: SelectionType { CURRENT | ACTIVE | ALL | ANY } = ALL</arg>
<arg>browser: SelectionType { CURRENT | ACTIVE | ALL | ANY } = ALL</arg>
</arguments>
<doc>Returns a list of page ids based on the context and browser selection.
See `Browser, Context and Page` for more information about Page and related concepts.

``ALL`` and ``ANY`` are synonyms.
``ACTIVE`` and ``CURRENT`` are also synonyms.

| =Arguments= | =Description= |
| ``page``    | The page to get the ids from. ``ALL`` Returns all page ids as a list. ``ACTIVE`` Returns the id of the active page as a list. |
| ``context`` | The context to get the page ids from. ``ALL`` Page ids from all contexts shall be fetched. ``ACTIVE`` Only page ids from the active context shall be fetched. |
| ``browser`` | The browser to get the page ids from. ``ALL`` Page ids from all open browsers shall be fetched. ``ACTIVE`` Only page ids from the active browser shall be fetched. |


Example:
| Test Case
|     `New Page`    http://www.imbus.de
|     `New Page`    http://www.reaktor.com
|     ${current_page}=   `Get Page IDs`    ACTIVE    ACTIVE    ACTIVE
|     Log                Current page ID is: ${current_page}[0]
|     ${all_pages}=      `Get Page IDs`    CURRENT   CURRENT   ALL
|     Log Many           These are all Page IDs    @{all_pages}

The ACTIVE page of the ACTIVE context of the ACTIVE Browser is the ``Current`` Page.

[https://forum.robotframework.org/t//4274|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Getter</tag>
</tags>
</kw>
<kw name="Get Page Source" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="115">
<arguments>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Gets pages HTML source as a string.

| =Arguments= | =Description= |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the state |
| ``message`` | overrides the default error message for assertion. |

Optionally does a string assertion. See `Assertions` for further details for
the assertion arguments. By default assertion is not done.

[https://forum.robotframework.org/t//4275|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Property" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="233">
<arguments>
<arg>selector: str</arg>
<arg>property: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the ``property`` of the element found by ``selector``.

| =Arguments= | =Description= |
| ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |
| ``property`` | Requested property name. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the state |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that the property value matches the expected value. See `Assertions`
for further details for the assertion arguments. By default assertion is not done.

If ``assertion_operator`` is set and property is not found, ``value`` is ``None``
and Keyword does not fail. See `Get Attribute` for examples.

Example:
| `Get Property`    h1    innerText    ==    Login Page
| ${property} =    `Get Property`    h1    innerText

[https://forum.robotframework.org/t//4276|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Scroll Position" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="1110">
<arguments>
<arg>selector: typing.Optional[str] = None</arg>
<arg>key: AreaFields { top | left | bottom | right | ALL } = AreaFields.ALL</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Gets elements or pages current scroll position as object ``{top: float, left: float, bottom: float, right: float}``.

It describes the rectangle which is visible of the scrollable content of that element.
all values are measured from position {top: 0, left: 0}.


| =Arguments= | =Description= |
| ``selector`` | Optional selector from which shall be retrieved. If no selector is given the client size of the page itself is used (``document.scrollingElement``). See the `Finding elements` section for details about the selectors. |
| ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the scroll position as dictionary, otherwise it will just return the single value selected by the key. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the counting |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that the value matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

See `Get BoundingBox` or `Get Scroll Size` for examples.

[https://forum.robotframework.org/t//4277|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Scroll Size" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="1051">
<arguments>
<arg>selector: typing.Optional[str] = None</arg>
<arg>key: SizeFields { width | height | ALL } = SizeFields.ALL</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Gets elements or pages scrollable size as object ``{width: float, height: float}``.


| =Arguments= | =Description= |
| ``selector`` | Optional selector from which shall be retrieved. If no selector is given the scroll size of the page itself is used. See the `Finding elements` section for details about the selectors. |
| ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the scroll size as dictionary, otherwise it will just return the single value selected by the key. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the counting |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that the state matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

See `Get BoundingBox` for more similar examples.

Example use:
| ${height}=         `Get Scroll Size`    height                          # filtered page by height
| Log                Width: ${height}                                   # Height: 58425
| ${scroll_size}=    `Get Scroll Size`    id=keyword-shortcuts-container  # unfiltered element
| Log                ${scroll_size}                                     # {'width': 253, 'height': 3036}

[https://forum.robotframework.org/t//4278|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Select Options" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="447">
<arguments>
<arg>selector: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns attributes of options of a ``select`` element as a list of dictionaries.

Returned dictionaries have the following keys and their values
"index", "value", "label" and "selected".


| =Arguments= | =Description= |
| ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the state |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that these match the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

Example:

| `Get Select Options`     //select[2]    validate  [v["label"] for v in value] == ["Email", "Mobile"]
| `Get Select Options`   select#names     validate  any(v["label"] == "Mikko" for v in value)

[https://forum.robotframework.org/t//4279|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Selected Options" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="506">
<arguments>
<arg>selector: str</arg>
<arg>option_attribute: SelectAttribute { value | label | text | index } = SelectAttribute.label</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>*assertion_expected</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the specified attribute of selected options of the ``select`` element.

| =Arguments= | =Description= |
| ``selector`` | Selector from which the info is to be retrieved. See the `Finding elements` section for details about the selectors. |
| ``option_attribute`` | Which attribute shall be returned/verified. Defaults to label. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``*assertion_expected`` | Expected value for the state |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that these match the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

- ``==`` and ``!=`` can work with multiple values
- ``contains`` / ``*=`` only accepts one single expected value

Other operators are not allowed.

Example:

| `Select Options By`      label                    //select[2]    Email      Mobile
| ${selected_list}         `Get Selected Options`   //select[2]                                         # getter
| `Get Selected Options`   //select[2]              label          `==`       Mobile             Mail   #assertion content
| `Select Options By`      label                    select#names   2          4
| `Get Selected Options`   select#names             index          `==`       2                  4      #assertion index
| `Get Selected Options`   select#names             label          *=         Mikko                     #assertion contain
| `Get Selected Options`   select#names             label          validate   len(value) == 3           #assertion length

[https://forum.robotframework.org/t//4280|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Style" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="929">
<arguments>
<arg>selector: str</arg>
<arg>key: str = ALL</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Gets the computed style properties of the element selected by ``selector``.

Optionally matches with any sequence assertion operator.


| =Arguments= | =Description= |
| ``selector`` | Selector from which the style shall be retrieved. See the `Finding elements` section for details about the selectors. |
| ``key`` | Key of the requested CSS property. Retrieves "ALL" styles by default. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the counting |
| ``message`` | overrides the default error message for assertion. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Optionally asserts that the style matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

[https://forum.robotframework.org/t//4281|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Table Cell Element" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="718">
<arguments>
<arg>table: str</arg>
<arg>column: str</arg>
<arg>row: str</arg>
</arguments>
<doc>Returns the Web Element that has the same column index and same row index as the selected elements.

| =Arguments= | =Description= |
| ``table`` | selector must select the ``&lt;table&gt;`` element that contains both selected elements |
| ``column`` | selector can select any ``&lt;th&gt;`` or ``&lt;td&gt;`` element or one of their descendants. |
| ``row`` | selector can select any ``&lt;tr&gt;`` element or one of their descendant like ``&lt;td&gt;`` elements. |

``column`` and ``row`` can also consume index numbers instead of selectors.
Indexes are starting from ``0`` and ``-1`` is specific for the last element.

Selectors for ``column`` and ``row`` are directly appended to ``table`` selector like this: ``f"{table} &gt;&gt; {row}" .``

| = GitHub = |   = Slack =      | = Real Name =   |
| mkorpela   | @mkorpela        | Mikko Korpela   |
| aaltat     | @aaltat          | Tatu Aalto      |
| xylix      | @Kerkko Pelttari | Kerkko Pelttari |
| Snooz82    | @René            | René Rohner     |


Example:
| ${table}=    Set Variable    [id="Get Table Cell Element"] &gt;&gt; div.kw-docs table &gt;&gt; nth=1
| ${e}=    `Get Table Cell Element`    ${table}    "Real Name"    "aaltat"   # Returns element with text ``Tatu Aalto``
| Get Text    ${e}    ==    Tatu Aalto
| ${e}=    `Get Table Cell Element`    ${table}    "Slack"    "Mikko Korpela"   # Returns element with text ``@mkorpela``
| Get Text    ${e}    ==    @mkorpela
| ${e}=    `Get Table Cell Element`    ${table}    "mkorpela"    "Kerkko Pelttari"   # column does not need to be in row 0
| Get Text    ${e}    ==    @mkorpela
| ${e}=    `Get Table Cell Element`    ${table}    2    -1   # Index is also directly possible
| Get Text    ${e}    ==    René Rohner

[https://forum.robotframework.org/t//4282|Comment &gt;&gt;]</doc>
<tags>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Table Cell Index" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="773">
<arguments>
<arg>selector: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: typing.Union[int, str] = 0</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the index (0 based) of a table cell within its row.

| =Arguments= | =Description= |
| ``selector`` | can select any ``&lt;th&gt;`` or ``&lt;td&gt;`` element or one of their descendants. See the `Finding elements` section for details about the selectors. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the counting |
| ``message`` | overrides the default error message for assertion. |

Example:
| ${table}=    Set Variable    id=`Get Table Cell Element` &gt;&gt; div.kw-docs table   #Table of keyword `Get Table Cell Element`
| ${idx}=    `Get Table Cell Index`    ${table} &gt;&gt; "Real Name"
| Should Be Equal    ${idx}    ${2}
| `Get Table Cell Index`    ${table} &gt;&gt; "@aaltat"    ==    1

Optionally asserts that the index matches the specified assertion. See
`Assertions` for further details for the assertion arguments.
By default assertion is not done.

[https://forum.robotframework.org/t//4283|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Table Row Index" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="820">
<arguments>
<arg>selector: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: typing.Union[int, str] = 0</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the index (0 based) of a table row.


| =Arguments= | =Description= |
| ``selector`` | can select any ``&lt;th&gt;`` or ``&lt;td&gt;`` element or one of their descendants. See the `Finding elements` section for details about the selectors. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the counting |
| ``message`` | overrides the default error message for assertion. |

Example:
| ${table}=    Set Variable    id=`Get Table Cell Element` &gt;&gt; div.kw-docs table   #Table of keyword `Get Table Cell Element`
| ${idx}=    `Get Table Row Index`    ${table} &gt;&gt; "@René"
| Should Be Equal    ${idx}    ${4}
| `Get Table Row Index`    ${table} &gt;&gt; "@aaltat"    ==    2

Optionally asserts that the index matches the specified assertion. See
`Assertions` for further details for the assertion arguments.
By default assertion is not done.

[https://forum.robotframework.org/t//4284|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Text" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="183">
<arguments>
<arg>selector: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns text attribute of the element found by ``selector``.

       Keyword can also return `input` or `textarea` value property text.
See the `Finding elements` section for details about the selectors.

       | =Arguments= | =Description= |
       | ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
       | ``assertion_expected`` | Expected value for the state |
       | ``message`` | overrides the default error message for assertion. |

       Keyword uses strict mode, see `Finding elements` for more details about strict mode.

       Optionally asserts that the text matches the specified assertion. See `Assertions`
       for further details for the assertion arguments. By default, assertion is not done.

       Example:
       | ${text} =    `Get Text`    id=important                            # Returns element text without assertion.
       | ${text} =    `Get Text`    id=important    ==    Important text    # Returns element text with assertion.
       | ${text} =    `Get Text`    //input         ==    root              # Returns input element text with assertion.

       [https://forum.robotframework.org/t/comments-for-get-text/4285|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Title" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="149">
<arguments>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the title of the current page.

| =Arguments= | =Description= |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the state |
| ``message`` | overrides the default error message for assertion. |

Optionally asserts that title matches the specified assertion. See `Assertions`
for further details for the assertion arguments. By default assertion is not done.

[https://forum.robotframework.org/t//4286|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Url" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="48">
<arguments>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the current URL.

| =Arguments= | =Description= |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the state |
| ``message`` | overrides the default error message for assertion. |

Optionally asserts that it matches the specified assertion. See `Assertions` for further details
for the assertion arguments. By default assertion is not done.

[https://forum.robotframework.org/t//4287|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Get Viewport Size" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\getters.py" lineno="664">
<arguments>
<arg>key: SizeFields { width | height | ALL } = SizeFields.ALL</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns the current viewport dimensions.

| =Arguments= | =Description= |
| ``key`` | Optionally filters the returned values. If keys is set to ``ALL`` (default) it will return the viewport size as dictionary, otherwise it will just return the single value selected by the key. Note: If a single value is retrieved, an assertion does *not* need a ``validate`` combined with a cast of ``value``. |
| ``assertion_operator`` | See `Assertions` for further details. Defaults to None. |
| ``assertion_expected`` | Expected value for the counting |
| ``message`` | overrides the default error message for assertion. |

Optionally asserts that the state matches the specified assertion. See
`Assertions` for further details for the assertion arguments. By default assertion
is not done.

Example:
| `Get Viewport Size`    ALL    ==    {'width':1280, 'height':720}
| `Get Viewport Size`    width    &gt;=    1200

[https://forum.robotframework.org/t//4288|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>BrowserControl</tag>
<tag>Getter</tag>
</tags>
</kw>
<kw name="Go Back" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="44">
<arguments>
</arguments>
<doc>Navigates to the previous page in history.

[https://forum.robotframework.org/t//4289|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Go Forward" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="34">
<arguments>
</arguments>
<doc>Navigates to the next page in history.

[https://forum.robotframework.org/t//4290|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Go To" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="54">
<arguments>
<arg>url: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
</arguments>
<doc>Navigates to the given ``url``.

| =Arguments= | =Description= |
| ``url`` | &lt;str&gt; URL to be navigated to. |
| ``timeout`` | &lt;str&gt; time to wait page to load. If not defined will use the library default timeout. |

[https://forum.robotframework.org/t//4291|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Grant Permissions" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="405">
<arguments>
<arg>*permissions: Permission { geolocation | midi | midi_sysex | ... }</arg>
<arg>origin: typing.Optional[str] = None</arg>
</arguments>
<doc>Grants permissions to the current context.

| =Arguments= | =Description= |
| ``permissions`` | is a list of permissions to grant. Permissions can be one of the following: geolocation, notifications, camera, microphone, |
| ``origin`` | The origin to grant permissions to, e.g. "https://example.com". |

Example:
| `New Context`
| `Grant Permissions`    geolocation

[https://forum.robotframework.org/t//4292|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Handle Future Dialogs" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="747">
<arguments>
<arg>action: DialogAction { accept | dismiss }</arg>
<arg>prompt_input: str = </arg>
</arguments>
<doc>Handle next dialog on page with ``action``.

Dialog can be any of alert, beforeunload, confirm or prompt. Handling dialogue
must be called before the action, like example click, that triggers the
dialogue.

If a handler is not set dialogs are dismissed by default.

| =Arguments= | =Description= |
| ``action`` | How to handle the alert. Can be ``accept`` or ``dismiss``. |
| ``prompt_input`` | The value to enter into prompt. Only valid if ``action`` argument equals ``accept``. Defaults to empty string. |

Example:
| `Handle Future Dialogs`    action=accept
| `Click`                    \#alerts

[https://forum.robotframework.org/t//4293|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Highlight Elements" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\evaluation.py" lineno="120">
<arguments>
<arg>selector: str</arg>
<arg>duration: timedelta = 0:00:05</arg>
<arg>width: str = 2px</arg>
<arg>style: str = dotted</arg>
<arg>color: str = blue</arg>
</arguments>
<doc>Adds a highlight to elements matched by the ``selector``. Provides a style adjustment.

| =Arguments= | =Description= |
| ``selector`` | Selectors which shall be highlighted. See the `Finding elements` section for details about the selectors. |
| ``duration`` | Sets for how long the selector shall be highlighted. Defaults to ``5s`` =&gt; 5 seconds. |
| ``width`` | Sets the width of the higlight border. Defaults to 2px. |
| ``style`` | Sets the style of the border. Defaults to dotted. |
| ``color`` | Sets the color of the border. Valid colors i.e. are: ``red``, ``blue``, ``yellow``, ``pink``, ``black`` |

Keyword does not fail if selector resolves to multiple elements.

Example:
| `Highlight Elements`    input#login_button    duration=200ms
| `Highlight Elements`    input#login_button    duration=200ms    width=4px    style=solid    color=\#FF00FF

[https://forum.robotframework.org/t//4294|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Hover" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="403">
<arguments>
<arg>selector: str</arg>
<arg>position_x: typing.Optional[float] = None</arg>
<arg>position_y: typing.Optional[float] = None</arg>
<arg>force: bool = False</arg>
<arg>*modifiers: KeyboardModifier { Alt | Control | Meta | Shift }</arg>
</arguments>
<doc>Moves the virtual mouse and scrolls to the element found by ``selector``.

This method hovers over an element matching ``selector`` by performing the following steps:
- Find an element match matching ``selector``. If there is none,
  wait until a matching element is attached to the DOM.
- Wait for actionability checks on the matched element, unless ``force`` option is set.
  If the element is detached during the checks, the whole action is retried.
- Scroll the element into view if needed.
- Use `Mouse Move` to hover over the center of the element, or the specified ``position``.


| =Arguments= | =Description= |
| ``selector`` | Selector element to hover. See the `Finding elements` section for details about the selectors. |
| ``position_x`` &amp; ``position_y`` | A point to hover relative to the top-left corner of element bounding box. If not specified, hovers over some visible point of the element. Only positive values within the bounding-box are allowed. |
| ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |
| ``*modifiers`` | Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Example:
| `Hover`    h1
| `Hover`    h1    10   20    Alt

[https://forum.robotframework.org/t//4295|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Http" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\network.py" lineno="60">
<arguments>
<arg>url: str</arg>
<arg>method: RequestMethod { HEAD | GET | POST | PUT | PATCH | DELETE } = RequestMethod.GET</arg>
<arg>body: typing.Optional[str] = None</arg>
<arg>headers: typing.Optional[dict] = None</arg>
</arguments>
<doc>Performs an HTTP request in the current browser context

| =Arguments= | =Description= |
| ``url`` | The request url, e.g. ``/api/foo``. |
| ``method`` | The HTTP method for the request. Defaults to GET. |
| ``body`` | The request body. GET requests cannot have a body. If the body can be parsed as JSON, the ``Content-Type`` header for the request will be automatically set to ``application/json``. Defaults to None. |
| ``headers`` | A dictionary of additional request headers. Defaults to None. |

The response is a Python dictionary with following attributes:
  - ``status`` &lt;int&gt; The status code of the response.
  - ``statusText`` &lt;str&gt; Status text corresponding to ``status``, e.g OK or INTERNAL SERVER ERROR.
  - ``body`` &lt;dict&gt; | &lt;str&gt; The response body. If the body can be parsed as a JSON obejct,
  it will be returned as Python dictionary, otherwise it is returned as a string.
  - ``headers`` &lt;dict&gt; A dictionary containing all response headers.
  - ``ok`` &lt;bool&gt; Whether the request was successfull, i.e. the ``status`` is range 200-299.

Here's an example of using Robot Framework dictionary variables and extended variable syntax to
do assertions on the response object:

| &amp;{res}=             `HTTP`                       /api/endpoint
| Should Be Equal     ${res.status}              200
| Should Be Equal     ${res.body.some_field}     some value

[https://forum.robotframework.org/t//4296|Comment &gt;&gt;]</doc>
<tags>
<tag>HTTP</tag>
</tags>
</kw>
<kw name="Keyboard Input" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="1103">
<arguments>
<arg>action: KeyboardInputAction { insertText | type }</arg>
<arg>input: str</arg>
<arg>delay: typing.Union[int, datetime.timedelta] = 0:00:00</arg>
</arguments>
<doc>Input text into page with virtual keyboard.

| =Arguments= | =Description= |
| ``action`` | ``insertText``: Dispatches only input event, does not emit the keydown, keyup or keypress events. ``type``: Sends a keydown, keypress/input, and keyup event for each character in the text. |
| ``input`` | The inputstring to be typed. _No special keys possible._ |
| ``delay`` | Time to wait between key presses in Robot Framework's time format. Defaults to 0. |

*Attention:*
Argument type `int` for 'delay' in milliseconds has been changed to `timedelta` in Browser 14.0.0. Use Robot Framework time format with units instead.


Note: To press a special key, like Control or ArrowDown, use keyboard.press.
Modifier keys DO NOT effect these methods. For testing modifier effects use single key
presses with ``Keyboard Key  press``

Example:
| `Keyboard Input`    insertText    0123456789

[https://forum.robotframework.org/t//4297|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Keyboard Key" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="1074">
<arguments>
<arg>action: KeyAction { down | up | press }</arg>
<arg>key: str</arg>
</arguments>
<doc>Press a keyboard key on the virtual keyboard or set a key up or down.

| =Arguments= | =Description= |
| ``action`` | Determine whether the key should be released (``up``), hold (``down``) or pressed once (``press``). ``down`` or ``up`` are useful for combinations i.e. with Shift. |
| ``key`` | The key to be pressed. An example of valid keys are: ``F1`` - ``F12``, ``Digit0`` - ``Digit9``, ``KeyA`` - ``KeyZ``, ``Backquote``, ``Minus``, ``Equal``, ``Backslash``, ``Backspace``, ``Tab``, ``Delete``, ``Escape``, ``ArrowDown``, ``End``, ``Enter``, ``Home``, ``Insert``, ``PageDown``, ``PageUp``, ``ArrowRight``, ``ArrowUp`` , etc. |


Useful keys for ``down`` and ``up`` for example are:
``Shift``, ``Control``, ``Alt``, ``Meta``, ``ShiftLeft``

Example excecution:
| `Keyboard Key`    press    S
| `Keyboard Key`    down     Shift
| `Keyboard Key`    press    ArrowLeft
| `Keyboard Key`    press    Delete
| `Keyboard Key`    up       Shift

Note: Capital letters don't need to be written by the help of Shift. You can type them in directly.

[https://forum.robotframework.org/t//4298|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="LocalStorage Clear" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\webapp_state.py" lineno="112">
<arguments>
</arguments>
<doc>Remove all saved data from the local storage.

Example:
| `Local Storage Set Item`      Foo    bar
| `LocalStorage Clear`
| ${item} =    `Local Storage Get Item`    Foo
| Should Be Equal    ${item}    ${None}

[https://forum.robotframework.org/t//4299|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="LocalStorage Get Item" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\webapp_state.py" lineno="29">
<arguments>
<arg>key: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Get saved data from the local storage.

| =Arguments= | =Description= |
| ``key`` | Named key of the item in the storage. |
| ``assertion_operator`` | Assertion operator to use. See `Assertions` for more information. |
| ``assertion_expected`` | Expected value to compare with. |
| ``message`` | Custom error message to use. |

See `Assertions` for further details for the assertion arguments. Defaults to None.

Example:
| `Local Storage Get Item`    Key    ==    Value    My error
| ${value} =    `Local Storage Get Item`    Key

[https://forum.robotframework.org/t//4300|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="LocalStorage Remove Item" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\webapp_state.py" lineno="89">
<arguments>
<arg>key: str</arg>
</arguments>
<doc>Remove saved data with key from the local storage.

| =Arguments= | =Description= |
| ``key`` | The name of the item which shall be deleted. |

Example:
| `Local Storage Set Item`      Foo    bar
| `LocalStorage Remove Item`    Foo
| ${item} =    `Local Storage Get Item`    Foo
| Should Be Equal    ${item}    ${None}

[https://forum.robotframework.org/t//4301|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="LocalStorage Set Item" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\webapp_state.py" lineno="68">
<arguments>
<arg>key: str</arg>
<arg>value: str</arg>
</arguments>
<doc>Save data to the local storage.

| =Arguments= | =Description= |
| ``key`` | The name of the key under which it should be saved. |
| ``value`` | The value which shall be saved as a string. |

Example:
| `Local Storage Set Item`    Key    Value

[https://forum.robotframework.org/t//4302|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Mouse Button" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="824">
<arguments>
<arg>action: MouseButtonAction { click | down | up }</arg>
<arg>x: typing.Optional[float] = None</arg>
<arg>y: typing.Optional[float] = None</arg>
<arg>button: MouseButton { left | middle | right } = MouseButton.left</arg>
<arg>clickCount: int = 1</arg>
<arg>delay: typing.Union[int, datetime.timedelta] = 0:00:00</arg>
</arguments>
<doc>Clicks, presses or releases a mouse button.

| =Arguments= | =Description= |
| ``action`` | Defines if it is a mouseclick (``click``), holding down a button (``down``) or releasing it (``up``). |
| ``x``, ``y`` | Coordinates to move before action is executed. |
| ``button`` | One of ``left``, ``middle`` or ``up``. Defaults to ``left``. |
| ``clickCount`` | Determine how often the button shall be clicked if action is equal to ``click``. Defaults to 1. |
| ``delay`` | Delay in Robot Framework time format between the mousedown and mouseup event. Can only be set if the action is ``click``. |

*Attention:*
Argument type `int` for 'delay' in milliseconds has been changed to `timedelta` in Browser 14.0.0. Use Robot Framework time format instead.
For refactoring just add 'ms' after the delay number.

Delay Example:
| `Mouse Button`    click    100 ms
| `Mouse Button`    click    ${dyn_delay} ms

Moving the mouse between holding down and releasing it, is possible with `Mouse Move`.

Example:
| `Hover`                     "Obstacle"           # Move mouse over the element
| `Mouse Button`              down                 # Press mouse button down
| `Mouse Move Relative To`    "Obstacle"    500    # Drag mouse
| `Mouse Button`              up                   # Release mouse button

[https://forum.robotframework.org/t//4303|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Mouse Move" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="1054">
<arguments>
<arg>x: float</arg>
<arg>y: float</arg>
<arg>steps: int = 1</arg>
</arguments>
<doc>Instead of selectors command mouse with coordinates.
The Click commands will leave the virtual mouse on the specified coordinates.

| =Arguments= | =Description= |
| ``x`` &amp; ``y`` | Are absolute coordinates starting at the top left of the page. |
| ``steps`` | Number of intermediate steps for the mouse event. Often it is nessesary to send more than one intermediate event to get the desired result. Defaults to 1. |

Example:
| `Mouse Move`    400    400

[https://forum.robotframework.org/t//4304|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Mouse Move Relative To" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="1014">
<arguments>
<arg>selector: str</arg>
<arg>x: float = 0.0</arg>
<arg>y: float = 0.0</arg>
<arg>steps: int = 1</arg>
</arguments>
<doc>Moves the mouse cursor relative to the selected element.

| =Arguments= | =Description= |
| ``selector`` | Identifies the element, which center is the start-point. |
| ``x`` &amp; ``y`` | Are relative coordinates to the center of the elements bounding box. |
| ``steps`` | Number of intermediate steps for the mouse event. Often it is nessesary to send more than one intermediate event to get the desired result. Defaults to 1. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Example:
| `Mouse Move Relative To`    id=indicator    -100

[https://forum.robotframework.org/t//4305|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="New Browser" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="334">
<arguments>
<arg>browser: SupportedBrowsers { chromium | firefox | webkit } = SupportedBrowsers.chromium</arg>
<arg>headless: bool = True</arg>
<arg>*deprecated_pos_args</arg>
<arg>args: typing.Optional[typing.List[str]] = None</arg>
<arg>channel: typing.Optional[str] = None</arg>
<arg>devtools: bool = False</arg>
<arg>downloadsPath: typing.Optional[str] = None</arg>
<arg>env: typing.Optional[typing.Dict] = None</arg>
<arg>executablePath: typing.Optional[str] = None</arg>
<arg>handleSIGHUP: bool = True</arg>
<arg>handleSIGINT: bool = True</arg>
<arg>handleSIGTERM: bool = True</arg>
<arg>ignoreDefaultArgs: typing.Optional[typing.List[str]] = None</arg>
<arg>proxy: typing.Optional[Browser.utils.data_types.Proxy] = None</arg>
<arg>slowMo: timedelta = 0:00:00</arg>
<arg>timeout: timedelta = 0:00:30</arg>
</arguments>
<doc>Create a new playwright Browser with specified options.

See `Browser, Context and Page` for more information about Browser and related concepts.

Returns a stable identifier for the created browser.

| =Arguments= | =Description= |
| ``browser`` | Opens the specified [#type-SupportedBrowsers|browser]. Defaults to chromium. |
| ``headless`` | Set to False if you want a GUI. Defaults to True. |
| ``*deprecated_pos_args`` | Other positional arguments are deprecated for `New Browser`. Please use named arguments in the future. We will remove positional arguments after RoboCon 2023 Online in March. Old order was ``executablePath``, ``args``, ``ignoreDefaultArgs``, ``proxy``, ``downloadsPath``, ``handleSIGINT``, ``handleSIGTERM``, ``handleSIGHUP``, ``timeout``, ``env``, ``devtools``, ``slowMo``, ``channel``. |
| ``executablePath`` | Path to a browser executable to run instead of the bundled one. If executablePath is a relative path, then it is resolved relative to current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk. Defaults to None. |
| ``args`` | Additional arguments to pass to the browser instance. The list of Chromium flags can be found [http://peter.sh/experiments/chromium-command-line-switches/|here]. Defaults to None. |
| ``ignoreDefaultArgs`` | If an array is given, then filters out the given default arguments. Defaults to None. |
| ``proxy`` | Network [#type-Proxy|Proxy] settings. Structure: ``{'server': &lt;str&gt;, 'bypass': &lt;Optional[str]&gt;, 'username': &lt;Optional[str]&gt;, 'password': &lt;Optional[str]&gt;}`` |
| ``downloadsPath`` | If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed. |
| ``handleSIGINT`` | Close the browser process on Ctrl-C. Defaults to True. |
| ``handleSIGTERM`` | Close the browser process on SIGTERM. Defaults to True. |
| ``handleSIGHUP`` | Close the browser process on SIGHUP. Defaults to True. |
| ``timeout`` | Maximum time in Robot Framework time format to wait for the browser instance to start. Defaults to 30 seconds. Pass 0 to disable timeout. |
| ``env`` | Specifies environment variables that will be visible to the browser. Dictionary keys are variable names, values are the content. Defaults to None. |
| ``devtools`` | Chromium-only Whether to auto-open a Developer Tools panel for each tab. |
| ``slowMo`` | Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to no delay. |
| ``channel`` | Allows to operate against the stock Google Chrome and Microsoft Edge browsers. For more details see: [https://playwright.dev/docs/browsers/#google-chrome--microsoft-edge|Playwright documentation]. |


Old deprecated argument order:
``executablePath``, ``args``, ``ignoreDefaultArgs``, ``proxy``, ``downloadsPath``, ``handleSIGINT``,
``handleSIGTERM``, ``handleSIGHUP``, ``timeout``, ``env``, ``devtools``, ``slowMo``, ``channel``


[https://forum.robotframework.org/t/comments-for-new-browser/4306|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="New Context" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="447">
<arguments>
<arg>*deprecated_pos_args</arg>
<arg>acceptDownloads: bool = True</arg>
<arg>bypassCSP: bool = False</arg>
<arg>colorScheme: typing.Optional[Browser.utils.data_types.ColorScheme] = None</arg>
<arg>defaultBrowserType: typing.Optional[Browser.utils.data_types.SupportedBrowsers] = None</arg>
<arg>deviceScaleFactor: typing.Optional[float] = None</arg>
<arg>extraHTTPHeaders: typing.Optional[typing.Dict[str, str]] = None</arg>
<arg>forcedColors: ForcedColors { active | none } = ForcedColors.none</arg>
<arg>geolocation: typing.Optional[Browser.utils.data_types.GeoLocation] = None</arg>
<arg>hasTouch: typing.Optional[bool] = None</arg>
<arg>hideRfBrowser: bool = False</arg>
<arg>httpCredentials: typing.Optional[Browser.utils.data_types.HttpCredentials] = None</arg>
<arg>ignoreHTTPSErrors: bool = False</arg>
<arg>isMobile: typing.Optional[bool] = None</arg>
<arg>javaScriptEnabled: bool = True</arg>
<arg>locale: typing.Optional[str] = None</arg>
<arg>offline: bool = False</arg>
<arg>permissions: typing.Optional[typing.List[Browser.utils.data_types.Permission]] = None</arg>
<arg>recordHar: typing.Optional[Browser.utils.data_types.RecordHar] = None</arg>
<arg>recordVideo: typing.Optional[Browser.utils.data_types.RecordVideo] = None</arg>
<arg>reducedMotion: ReduceMotion { reduce | no_preference } = ReduceMotion.no_preference</arg>
<arg>screen: typing.Optional[typing.Dict[str, int]] = None</arg>
<arg>storageState: typing.Optional[str] = None</arg>
<arg>timezoneId: typing.Optional[str] = None</arg>
<arg>tracing: typing.Optional[str] = None</arg>
<arg>userAgent: typing.Optional[str] = None</arg>
<arg>videoSize: typing.Optional[Browser.utils.data_types.ViewportDimensions] = None</arg>
<arg>videosPath: typing.Optional[str] = None</arg>
<arg>viewport: typing.Optional[Browser.utils.data_types.ViewportDimensions] = {'width': 1280, 'height': 720}</arg>
</arguments>
<doc>Create a new BrowserContext with specified options.

See `Browser, Context and Page` for more information about BrowserContext.

Returns a stable identifier for the created context
that can be used in `Switch Context`.


| =Arguments=              | =Description= |
| ``*deprecated_pos_args`` | Positional arguments are deprecated for New Context. Please use named arguments in the future. We will remove positional arguments after RoboCon 2023 Online in March. Old positional order was ``acceptDownloads``, ``ignoreHTTPSErrors``, ``bypassCSP``, ``viewport``, ``userAgent``, ``deviceScaleFactor``, ``isMobile``, ``hasTouch``, ``javaScriptEnabled``, ``timezoneId``, ``geolocation``, ``locale``, ``permissions``, ``extraHTTPHeaders``, ``offline``, ``httpCredentials``, ``colorScheme``, ``videosPath``, ``videoSize``, ``defaultBrowserType``, ``hideRfBrowser``, ``recordVideo``, ``recordHar``, ``tracing``, ``screen``, ``storageState``, ``reducedMotion``, ``forcedColors``. |
| ``acceptDownloads``      | Whether to automatically download all the attachments. Defaults to True where all the downloads are accepted. |
| ``bypassCSP``            | Toggles bypassing page's Content-Security-Policy. Defaults to False. |
| ``colorScheme``          | Emulates `'prefers-colors-scheme'` media feature, supported values are `'light'`, `'dark'`, `'no-preference'`. |
| ``defaultBrowserType``   | If no browser is open and `New Context` opens a new browser with defaults, it now uses this setting. Very useful together with `Get Device` keyword. |
| ``deviceScaleFactor``    | Specify device scale factor (can be thought of as dpr). Defaults to ``1``. |
| ``extraHTTPHeaders``     | A dictionary containing additional HTTP headers to be sent with every request. All header values must be strings. |
| ``forcedColors``         | Emulates `forced-colors` media feature, supported values are `active` and `none`. |
| ``geolocation``          | A dictionary containing ``latitude`` and ``longitude`` or ``accuracy`` to emulate. If ``latitude`` or ``longitude`` is not specified, the device geolocation won't be overriden. |
| ``hasTouch``             | Specifies if viewport supports touch events. Defaults to False. |
| ``hideRFBrowser``        | If set to True, the browser window will be hidden. |
| ``httpCredentials``      | Credentials for [https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication|HTTP authentication]. |
| ``ignoreHTTPSErrors``    | Whether to ignore HTTPS errors during navigation. Defaults to False. |
| ``isMobile``             | Whether the meta viewport tag is taken into account and touch events are enabled. Defaults to False. |
| ``javaScriptEnabled``    | Whether or not to enable JavaScript in the context. Defaults to True. |
| ``locale``               | Specify user locale, for example ``en-GB``, ``de-DE``, etc. |
| ``offline``              | Toggles browser's offline mode. Defaults to False. |
| ``permissions``          | A dictionary containing permissions to grant to all pages in this context. All permissions that are not listed here will be automatically denied. |
| ``recordHar``            | Enables [http://www.softwareishard.com/blog/har-12-spec/|HAR] recording for all pages into to a file. Must be path to file, example ${OUTPUT_DIR}/har.file. If not specified, the HAR is not recorded. Make sure to await context to close for the to be saved. |
| ``recordVideo``          | Enables video recording for all pages into a folder. If not specified videos are not recorded. Make sure to close context for videos to be saved. |
| ``reduceMotion``         | Emulates `prefers-reduced-motion` media feature, supported values are `reduce`, `no-preference`. |
| ``screen``               | Emulates consistent window screen size available inside web page via window.screen. Is only used when the viewport is set. Example {'width': 414, 'height': 896} |
| ``storageState``         | Restores the storage stated created by the `Save Storage State` keyword. Must mbe full path to the file. |
| ``timezoneId``           | Changes the timezone of the context. See [https://source.chromium.org/chromium/chromium/src/+/master:third_party/icu/source/data/misc/metaZones.txt|ICU’s metaZones.txt] for a list of supported timezone IDs. |
| ``tracing``              | File name where the [https://playwright.dev/docs/api/class-tracing/|tracing] file is saved. Example trace.zip will be saved to ${OUTPUT_DIR}/traces.zip. Temporary trace files will be saved to ${OUTPUT_DIR}/Browser/traces. If file name is defined, tracing will be enabled for all pages in the context. Tracing is automatically closed when context is closed. Temporary trace files will be automatically deleted at start of each test execution. Trace file can be opened after the test execution by running command from shell: ``rfbrowser show-trace -F /path/to/trace.zip``. |
| ``userAgent``            | Specific user agent to use in this context. |
| ``videoSize``            | Specifies dimensions of the automatically recorded video. Can only be used if videosPath is set. If not specified the size will be equal to viewport. If viewport is not configured explicitly the video size defaults to 1280x720. Actual picture of the page will be scaled down if necessary to fit specified size. |
| ``videosPath``           | Enables video recording for all pages into a folder. If not specified videos are not recorded. Make sure to close context for videos to be saved. |
| ``viewport``             | A dictionary containing ``width`` and ``height``. Emulates consistent viewport for each page. Defaults to 1280x720. null disables the default viewport. If ``width`` and ``height`` is  ``0``, the viewport will scale with the window. |


Old deprecated argument order:
``acceptDownloads``, ``ignoreHTTPSErrors``, ``bypassCSP``, ``viewport``, ``userAgent``, ``deviceScaleFactor``,
``isMobile``, ``hasTouch``, ``javaScriptEnabled``, ``timezoneId``, ``geolocation``, ``locale``,
``permissions``, ``extraHTTPHeaders``, ``offline``, ``httpCredentials``, ``colorScheme``, ``videosPath``,
``videoSize``, ``defaultBrowserType``, ``hideRfBrowser``, ``recordVideo``, ``recordHar``, ``tracing``,
``screen``, ``storageState``, ``reducedMotion``, ``forcedColors``

Example:
| Test an iPhone
|     ${device}=    `Get Device`    iPhone X
|     `New Context`    &amp;{device}        # unpacking here with &amp;
|     `New Page`    http://example.com

A BrowserContext is the Playwright object that controls a single browser profile.
Within a context caches and cookies are shared. See
[https://playwright.dev/docs/api/class-browser#browsernewcontextoptions|Playwright browser.newContext]
for a list of supported options.

If there's no open Browser this keyword will open one. Does not create pages.

[https://forum.robotframework.org/t/comments-for-new-context/4307|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="New Page" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="843">
<arguments>
<arg>url: typing.Optional[str] = None</arg>
</arguments>
<doc>Open a new Page.

A Page is the Playwright equivalent to a tab. See `Browser, Context and Page`
for more information about Page concept.

| =Arguments= | =Description= |
| url         | Optional URL to navigate the page to. The url should include protocol, e.g. `https://` |

Returns `NewPageDetails` as dictionary for created page.
`NewPageDetails` (dict) contains the keys ``page_id`` and ``video_path``. ``page_id`` is a stable identifier for
the created page. ``video_path`` is path to the created video or empty if video is not
created.

When a `New Page` is called without an open browser, `New Browser`
and `New Context` are executed with default values first.

[https://forum.robotframework.org/t//4308|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="New Persistent Context" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="622">
<arguments>
<arg>userDataDir: str = </arg>
<arg>browser: SupportedBrowsers { chromium | firefox | webkit } = SupportedBrowsers.chromium</arg>
<arg>headless: bool = True</arg>
<arg>*deprecated_pos_args</arg>
<arg>acceptDownloads: bool = True</arg>
<arg>args: typing.Optional[typing.List[str]] = None</arg>
<arg>bypassCSP: bool = False</arg>
<arg>channel: typing.Optional[str] = None</arg>
<arg>colorScheme: typing.Optional[Browser.utils.data_types.ColorScheme] = None</arg>
<arg>defaultBrowserType: typing.Optional[Browser.utils.data_types.SupportedBrowsers] = None</arg>
<arg>deviceScaleFactor: typing.Optional[float] = None</arg>
<arg>devtools: bool = False</arg>
<arg>downloadsPath: typing.Optional[str] = None</arg>
<arg>env: typing.Optional[typing.Dict] = None</arg>
<arg>executablePath: typing.Optional[str] = None</arg>
<arg>extraHTTPHeaders: typing.Optional[typing.Dict[str, str]] = None</arg>
<arg>forcedColors: ForcedColors { active | none } = ForcedColors.none</arg>
<arg>geolocation: typing.Optional[Browser.utils.data_types.GeoLocation] = None</arg>
<arg>handleSIGHUP: bool = True</arg>
<arg>handleSIGINT: bool = True</arg>
<arg>handleSIGTERM: bool = True</arg>
<arg>hasTouch: typing.Optional[bool] = None</arg>
<arg>hideRfBrowser: bool = False</arg>
<arg>httpCredentials: typing.Optional[Browser.utils.data_types.HttpCredentials] = None</arg>
<arg>ignoreDefaultArgs: typing.Optional[typing.List[str]] = None</arg>
<arg>ignoreHTTPSErrors: bool = False</arg>
<arg>isMobile: typing.Optional[bool] = None</arg>
<arg>javaScriptEnabled: bool = True</arg>
<arg>locale: typing.Optional[str] = None</arg>
<arg>offline: bool = False</arg>
<arg>permissions: typing.Optional[typing.List[Browser.utils.data_types.Permission]] = None</arg>
<arg>proxy: typing.Optional[Browser.utils.data_types.Proxy] = None</arg>
<arg>recordHar: typing.Optional[Browser.utils.data_types.RecordHar] = None</arg>
<arg>recordVideo: typing.Optional[Browser.utils.data_types.RecordVideo] = None</arg>
<arg>reducedMotion: ReduceMotion { reduce | no_preference } = ReduceMotion.no_preference</arg>
<arg>screen: typing.Optional[typing.Dict[str, int]] = None</arg>
<arg>slowMo: timedelta = 0:00:00</arg>
<arg>storageState: typing.Optional[str] = None</arg>
<arg>timeout: timedelta = 0:00:30</arg>
<arg>timezoneId: typing.Optional[str] = None</arg>
<arg>tracing: typing.Optional[str] = None</arg>
<arg>url: typing.Optional[str] = None</arg>
<arg>userAgent: typing.Optional[str] = None</arg>
<arg>videoSize: typing.Optional[Browser.utils.data_types.ViewportDimensions] = None</arg>
<arg>videosPath: typing.Optional[str] = None</arg>
<arg>viewport: typing.Optional[Browser.utils.data_types.ViewportDimensions] = {'width': 1280, 'height': 720}</arg>
</arguments>
<doc>Open a new
[https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context | persistent context].

`New Persistent Context` does basically executes `New Browser`, `New Context` and `New Page` in one step with setting a profile at the same time.

| =Argument=               | =Description= |
| ``userDataDir``          | Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for Chromium and Firefox. Note that Chromium's user data directory is the parent directory of the "Profile Path" seen at chrome://version. Pass an empty string to use a temporary directory instead. Old positional order was ``executablePath``, ``args``, ``ignoreDefaultArgs``, ``proxy``, ``downloadsPath``, ``handleSIGINT``, ``handleSIGTERM``, ``handleSIGHUP``, ``timeout``, ``env``, ``devtools``, ``slowMo``, ``channel``, ``acceptDownloads``, ``ignoreHTTPSErrors``, ``bypassCSP``, ``viewport``, ``userAgent``, ``deviceScaleFactor``, ``isMobile``, ``hasTouch``, ``javaScriptEnabled``, ``timezoneId``, ``geolocation``, ``locale``, ``permissions``, ``extraHTTPHeaders``, ``offline``, ``httpCredentials``, ``colorScheme``, ``videosPath``, ``videoSize``, ``defaultBrowserType``, ``hideRfBrowser``, ``recordVideo``, ``recordHar``, ``tracing``, ``screen``, ``storageState``, ``reducedMotion``, ``forcedColors``, ``url``. |
| ``browser``              | Browser type to use. Default is Chromium. |
| ``headless``             | Whether to run browser in headless mode. Defaults to ``True``. |
| ``*deprecated_pos_args`` | Other positional arguments are deprecated for `New Persistent Context`. Please use named arguments in the future. We will remove positional arguments after RoboCon 2023 Online in March. |
| other arguments          | Please see `New Browser`, `New Context` and `New Page` for more information about the other arguments. |

If you want to use extensions you need to download the extension as a .zip, enable loading the extension, and load the extensions using chromium arguments like below. Extensions only work with chromium and with a headful browser.

| ${launch_args}=  Set Variable  ["--disable-extensions-except=./ublock/uBlock0.chromium", "--load-extension=./ublock/uBlock0.chromium"]
| `New Persistent Context  browser=chromium  headless=False  args=${launch_args}

Check `New Browser` or `New context` for the specific argument docs.

Old deprecated argument order:
``executablePath``, ``args``, ``ignoreDefaultArgs``, ``proxy``, ``downloadsPath``, ``handleSIGINT``,
``handleSIGTERM``, ``handleSIGHUP``, ``timeout``, ``env``, ``devtools``, ``slowMo``, ``channel``,
``acceptDownloads``, ``ignoreHTTPSErrors``, ``bypassCSP``, ``viewport``, ``userAgent``, ``deviceScaleFactor``,
``isMobile``, ``hasTouch``, ``javaScriptEnabled``, ``timezoneId``, ``geolocation``, ``locale``,
``permissions``, ``extraHTTPHeaders``, ``offline``, ``httpCredentials``, ``colorScheme``, ``videosPath``,
``videoSize``, ``defaultBrowserType``, ``hideRfBrowser``, ``recordVideo``, ``recordHar``, ``tracing``,
``screen``, ``storageState``, ``reducedMotion``, ``forcedColors``, ``url``

[https://forum.robotframework.org/t//4309|Comment &gt;&gt;]</doc>
</kw>
<kw name="Open Browser" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="72">
<arguments>
<arg>url: typing.Optional[str] = None</arg>
<arg>browser: SupportedBrowsers { chromium | firefox | webkit } = SupportedBrowsers.chromium</arg>
<arg>headless: bool = False</arg>
<arg>pause_on_failure: bool = True</arg>
<arg>bypassCSP=True</arg>
</arguments>
<doc>Opens a new browser instance. Use this keyword for quick experiments or debugging sessions.

Use `New Page` directly instead of `Open Browser` for production and automated execution.
See `Browser, Context and Page` for more information about Browser and related concepts.

Creates a new browser, context and page with specified settings.


| =Argument=          | =Description= |
| ``url``              | Navigates to URL if provided. Defaults to None. |
| ``browser``          | Specifies which browser to use. The supported browsers are listed in the table below. |
| ``headless``         | If set to False, a GUI is provided otherwise it is hidden. Defaults to False. |
| ``pause_on_failure`` | Stop execution when failure detected and leave browser open. Defaults to True. |
| ``bypassCSP``        | Defaults to bypassing CSP and enabling custom script attach to the page. |

Browsers:

|   = Value =     |        = Name(s) =                                   |
| ``firefox``     | [https://www.mozilla.org/en-US/firefox/new|Firefox]  |
| ``chromium``    | [https://www.chromium.org/Home|Chromium]             |
| ``webkit``      | [https://webkit.org/|webkit]                         |

[https://forum.robotframework.org/t/comments-for-open-browser/4310|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Press Keys" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="260">
<arguments>
<arg>selector: str</arg>
<arg>*keys: str</arg>
</arguments>
<doc>Types the given key combination into element found by ``selector``.


| =Arguments= | =Description= |
| ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |
| ``*keys`` | Keys to be press after each other. Using + to chain combine modifiers with a single keypress ``Control+Shift+T`` is supported. |


Supports values like "a, b" which will be automatically typed.

Also supports identifiers for keys like ``ArrowLeft`` or ``Backspace``.

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

See playwright's documentation for a more comprehensive list of
supported input keys.
[https://playwright.dev/docs/api/class-page#page-press | Playwright docs for press.]

Example:
| # Keyword         Selector                    *Keys
| `Press Keys`      //*[@id="username_field"]    h    e   l   o   ArrowLeft   l

[https://forum.robotframework.org/t//4311|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Promise To" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\promises.py" lineno="37">
<arguments>
<arg>kw: str</arg>
<arg>*args</arg>
</arguments>
<doc>Wrap a Browser library keyword and make it a promise.

Promised keyword is executed and started on background.
Test execution continues without waiting for ``kw`` to finish.

Returns reference to the promised keyword.

``kw`` Keyword that will work async on background.

| =Arguments= | =Description= |
| ``kw`` | Keyword that will work async on background. |
| ``*args`` | Keyword arguments as normally used. |

Example:
| ${promise}=     `Promise To`            Wait For Response     matcher=     timeout=3
| `Click`           \#delayed_request
| ${body}=        `Wait For`              ${promise}

[https://forum.robotframework.org/t//4312|Comment &gt;&gt;]</doc>
<tags>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Promise To Upload File" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\promises.py" lineno="200">
<arguments>
<arg>path: PathLike</arg>
</arguments>
<doc>Returns a promise that resolves when file from ``path`` has been uploaded.

Fails if the upload has not happened during timeout.

Upload file from ``path`` into next file chooser dialog on page.

| =Arguments= | =Description= |
| ``path`` | Path to file to be uploaded. |

Example use:

| ${promise}=    `Promise To Upload File`    ${CURDIR}/test_upload_file.txt
| `Click`          id=open_file_chooser_button
| ${upload_result}=    `Wait For`    ${promise}

Alternatively, you can use `Upload File By Selector` keyword.

[https://forum.robotframework.org/t//4313|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Promise To Wait For Download" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\promises.py" lineno="108">
<arguments>
<arg>saveAs: str = </arg>
</arguments>
<doc>Returns a promise that waits for next download event on page.

If you can get the URL for the file to download, ``Download`` keyword should be a consistent way to download the file.

To enable downloads context's ``acceptDownloads`` needs to be true.

To configure download directory use New Browser's ``downloadsPath`` settings

With default filepath downloaded files are deleted when Context the download happened in is closed.

| =Arguments= | =Description= |
| ``saveAs`` | Defines path where the file is saved. File will also temporarily be saved in playwright context's default download location. |

Waited promise returns a dictionary which contains saveAs and suggestedFilename as keys. The saveAs contains
where the file is downloaded and suggestedFilename contains the name suggested name for the download.
The suggestedFilename is typically computed by the browser from the Content-Disposition response header
or the download attribute. See the spec on [https://html.spec.whatwg.org/#downloading-resources|whatwg].
Different browsers can use different logic for computing it.

Example usage:
| `New Context`          acceptDownloads=True
| `New Page`             ${LOGIN_URL}
| ${dl_promise}          `Promise To Wait For Download`    /path/to/download/file.name
| `Click`                \#file_download
| ${file_obj}=           `Wait For`  ${dl_promise}
| File Should Exist    ${file_obj}[saveAs]
| Should Be True       ${file_obj.suggestedFilename}

[https://forum.robotframework.org/t//4314|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Record Selector" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="373">
<arguments>
<arg>label: typing.Optional[str] = None</arg>
</arguments>
<doc>Record the selector that is under mouse.


| =Arguments= | =Description= |
| ``label`` | text to show when on the box in the page while recording. |

Focus on the page and move mouse over the element you want to select.

Example:
| ${selector} =    `Record Selector`   Button
| `Click`  ${selector}
| ${selector2} =    `Record Selector`  Page header
| `Get Text`  ${selector2}  ==  Expected text

[https://forum.robotframework.org/t//4315|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Register Keyword To Run On Failure" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\runonfailure.py" lineno="31">
<arguments>
<arg>keyword: typing.Optional[str]</arg>
<arg>*args: str</arg>
</arguments>
<doc>Sets the keyword to execute, when a Browser keyword fails.

| =Arguments= | =Description= |
| ``keyword`` | The name of a keyword that will be executed if a Browser keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries. |
| ``*args`` | The arguments to the keyword if any. |

The initial keyword to use is set when `importing` the library, and
the keyword that is used by default is `Take Screenshot`.
Taking a screenshot when something failed is a very useful
feature, but notice that it can slow down the execution.

It is possible to use string ``NONE`` or any other robot falsy name,
case-insensitively, as well as Python ``None`` to disable this
feature altogether.

This keyword returns an object which contains the the previously
registered failure keyword. The return value can be always used to
restore the original value later. The returned object contains
keyword name and the possible arguments used to for the keyword.

Example:
| `Register Keyword To Run On Failure`    Take Screenshot
| ${previous kw}=    `Register Keyword To Run On Failure`    NONE
| `Register Keyword To Run On Failure`    ${previous kw}
| `Register Keyword To Run On Failure`    Take Screenshot    fullPage=True
| `Register Keyword To Run On Failure`    Take Screenshot    failure-{index}    fullPage=True

[https://forum.robotframework.org/t//4316|Comment &gt;&gt;]</doc>
<tags>
<tag>Config</tag>
</tags>
</kw>
<kw name="Reload" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="395">
<arguments>
</arguments>
<doc>Reloads current active page.

[https://forum.robotframework.org/t//4317|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Save Storage State" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="1312">
<arguments>
</arguments>
<doc>Saves the current active context storage state to a file.

Web apps use cookie-based or token-based authentication, where
authenticated state is stored as
[https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies|cookies]
or in
[https://developer.mozilla.org/en-US/docs/Web/API/Storage|local storage].
Keyword retrieves the storage state from authenticated contexts and
save it to disk. Then `New Context` can be created with prepopulated
state.

Please note state file may contains secrets and should not be shared
with people outside of your organisation.

The file is created in ${OUTPUTDIR}/browser/state folder and file(s)
are automatically deleted when new test execution starts. File path
is returned by the keyword.

Example:
| Test Case
|     `New context`
|     `New Page`    https://login.page.html
|     #  Perform login
|     `Fill Secret`    id=username    $username
|     `Fill Secret`    id=password    $password
|     `Click`    id=button
|     `Get Text`    id=header    ==    Something
|     #  Save storage to disk
|     ${state_file} =    `Save Storage State`
|     #  Create new context with saved state
|     `New context`    storageState=${state_file}
|     `New Page`    https://login.page.html
|     #  Login is not needed because authentication is read from state file
|     `Get Text`    id=header    ==    Something

[https://forum.robotframework.org/t//4318|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Getter</tag>
</tags>
</kw>
<kw name="Scroll By" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="512">
<arguments>
<arg>selector: typing.Optional[str] = None</arg>
<arg>vertical: str = height</arg>
<arg>horizontal: str = 0</arg>
<arg>behavior: ScrollBehavior { auto | smooth } = ScrollBehavior.auto</arg>
</arguments>
<doc>Scrolls an element or the page relative from current position by the given values.

| =Arguments= | =Description= |
| ``selector`` | Selector of the element. If the selector is ``${None}`` or ``${Empty}`` the page itself is scrolled. To ensure an element is in view use `Hover` instead. See the `Finding elements` section for details about the selectors. |
| ``vertical`` | defines how far and in which direction to scroll vertically. It can be a positive or negative number. Positive scrolls down, like ``50``, negative scrolls up, like ``-50``. It can be a percentage value of the absolute scrollable size, like ``9.95%`` or negative like ``-10%``. It can be the string ``height`` to defining to scroll exactly one visible height down or up with ``-height``. _Be aware that some pages do lazy loading and load more content once you scroll down._ The percentage of the current scrollable height is used and may change. |
| ``horizontal`` | defines where to scroll horizontally. Works same as vertical but defines positive values for right and negative values for left. ``width`` defines to scroll exactly one visible range to the right. |
| ``behavior`` | defines whether the scroll happens directly or it scrolls smoothly. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

[https://forum.robotframework.org/t//4319|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Scroll To" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="475">
<arguments>
<arg>selector: typing.Optional[str] = None</arg>
<arg>vertical: str = top</arg>
<arg>horizontal: str = left</arg>
<arg>behavior: ScrollBehavior { auto | smooth } = ScrollBehavior.auto</arg>
</arguments>
<doc>Scrolls an element or the page to an absolute position based on given coordinates.

| =Arguments= | =Description= |
| ``selector`` | Selector of the element. If the selector is ``${None}`` or ``${Empty}`` the page itself is scrolled. To ensure an element is in view use `Hover` instead. See the `Finding elements` section for details about the selectors. |
| ``vertical`` | defines where to scroll vertically. It can be a positive number, like ``300``. It can be a percentage value of the absolute scrollable size, like ``50%``. It can be a string defining that top or the bottom of the scroll area. &lt; ``top`` | ``bottom`` &gt; _Be aware that some pages do lazy loading and load more content once you scroll down._ Bottom defines the current known bottom coordinate. |
| ``horizontal`` | defines where to scroll horizontally. Works same as vertical but defines &lt; ``left`` | ``right`` &gt; as start and end. |
| ``behavior`` | defines whether the scroll happens directly or it scrolls smoothly. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

[https://forum.robotframework.org/t//4320|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Scroll To Element" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="549">
<arguments>
<arg>selector: str</arg>
</arguments>
<doc>This method waits for actionability checks, then tries to scroll element into view,
unless it is completely visible.

| =Arguments= | =Description= |
| ``selector`` | Selector of the checkbox. See the `Finding elements` section for details about the selectors. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Does nothing if the element is already visible.

[https://forum.robotframework.org/t//4321|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Select Options By" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="616">
<arguments>
<arg>selector: str</arg>
<arg>attribute: SelectAttribute { value | label | text | index }</arg>
<arg>*values</arg>
</arguments>
<doc>Selects options from select element found by ``selector``.

| =Arguments= | =Description= |
| ``selector`` | Selector of the ``&lt;select&gt;`` tag. See the `Finding elements` section for details about the selectors. |
| ``attribute`` | Attribute to select options by. Can be ``value``, ``label``, ``text`` or ``index``. Where ``label`` and ``text`` are same. |
| ``*values`` | Values to select. |


Returns list of options which keyword was able to select. The type of
list item matches to ``attribute`` definition. Example if ``attribute``
equals to `label` returned list contains label values. Or in case of
`index` it contains list of selected indexes.

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

If no values to select are passed will deselect options in element.

Example:
| ${selected} =    `Select Options By`    select[name=preferred_channel]    label    Direct mail
| List Should Contain Value    ${selected}    Direct mail
| ${selected} =    `Select Options By`    select[name=interests]    value    males    females    others
| List Should Contain Value    ${selected}    males
| List Should Contain Value    ${selected}    females
| List Should Contain Value    ${selected}    others
| Length Should Be    ${selected}    3
| ${selected} =    `Select Options By`    select[name=possible_channels]    index    0    2
| List Should Contain Value    ${selected}    0
| List Should Contain Value    ${selected}    2
| ${selected} =    `Select Options By`    select[name=interests]    text     Males    Females
| List Should Contain Value    ${selected}    Males
| List Should Contain Value    ${selected}    Females

[https://forum.robotframework.org/t//4322|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="SessionStorage Clear" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\webapp_state.py" lineno="214">
<arguments>
</arguments>
<doc>Remove all saved data from the session storage.

Example:
| `SessionStorage Set Item`    mykey3    myvalue3
|  `SessionStorage Clear`
| `SessionStorage Get Item`    mykey3    ==    ${None}

[https://forum.robotframework.org/t//4323|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="SessionStorage Get Item" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\webapp_state.py" lineno="133">
<arguments>
<arg>key: str</arg>
<arg>assertion_operator: typing.Optional[assertionengine.assertion_engine.AssertionOperator] = None</arg>
<arg>assertion_expected: Any = None</arg>
</arguments>
<doc>Get saved data from from session storage.

| =Arguments= | =Description= |
| ``key`` | Named key of the item in the storage. |
| ``assertion_operator`` | Assertion operator to use. See `Assertions` for more information. |
| ``assertion_expected`` | Expected value to compare with. |

Example:
| `SessionStorage Set Item`    key2    value2
| ${item} =    `SessionStorage Get Item`    key1
| Should Be Equal    ${item}    value2

[https://forum.robotframework.org/t//4324|Comment &gt;&gt;]</doc>
<tags>
<tag>Assertion</tag>
<tag>Getter</tag>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="SessionStorage Remove Item" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\webapp_state.py" lineno="191">
<arguments>
<arg>key: str</arg>
</arguments>
<doc>Remove saved data with key from the session storage.

| =Arguments= | =Description= |
| ``key`` | The name of the item which shall be deleted. |

Example:
| `SessionStorage Set Item`       mykey2    myvalue2
| `SessionStorage Remove Item`    mykey2
| `SessionStorage Get Item`       mykey2    ==    ${None}

[https://forum.robotframework.org/t//4325|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="SessionStorage Set Item" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\webapp_state.py" lineno="170">
<arguments>
<arg>key: str</arg>
<arg>value: str</arg>
</arguments>
<doc>Save data to session storage.

| =Arguments= | =Description= |
| ``key`` | The name of the key under which it should be saved. |
| ``value`` | The value which shall be saved as a string. |

Example:
| `SessionStorage Set Item`    key2    value2

[https://forum.robotframework.org/t//4326|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Set Assertion Formatters" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\assertionengine\formatter.py" lineno="46">
<arguments>
<arg>formatters: typing.Dict[str, typing.List[str]]</arg>
</arguments>
<doc>Set keywords formatters for assertions.

``formatters`` is dictionary, where key is the keyword name
where formatters are applied. Dictionary value is a list of
formatter which are applied. Using keywords always replaces
existing formatters for keywords.

Supported formatter are: `normalize space`, `strip` and
`apply to expected`.

Example:
| `Set Assertion Formatters`    {"Get Text": ["strip", "normalize spaces"]}
    | ${value} =    `Get Text`    //div    ==    ${SPACE}Expected${SPACE * 2}Text
    | Should Be Equal    ${value}    Expected Text</doc>
</kw>
<kw name="Set Browser Timeout" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="207">
<arguments>
<arg>timeout: timedelta</arg>
<arg>scope: Scope { Global | Suite | Test | Task } = Scope.Suite</arg>
</arguments>
<doc>Sets the timeout used by most input and getter keywords.

| =Arguments= | =Description= |
| ``timeout`` | Timeout of it is for current playwright context and for new contexts. Supports Robot Framework [https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format|time format] . Returns the previous value of the timeout. |
| ``scope``   | Scope defines the live time of that setting. Available values are ``Global``, ``Suite`` or ``Test``/``Task``. See `Scope Settings` for more details. |

Example:
| ${old_timeout} =    `Set Browser Timeout`    1m 30 seconds
| Click     //button
| `Set Browser Timeout`    ${old_timeout}

[https://forum.robotframework.org/t//4328|Comment &gt;&gt;]</doc>
<tags>
<tag>Config</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Set Geolocation" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="364">
<arguments>
<arg>latitude: float</arg>
<arg>longitude: float</arg>
<arg>accuracy: typing.Optional[float] = None</arg>
</arguments>
<doc>Updated the correct Context's geolocation.

Latitude can be between -90 and 90 and longitude can be between -180 and 180.
Accuracy of the location must be positive number and defaults to 0. When
creating context, grant ``geolocation`` permission for pages to read its geolocation.

| =Arguments= | =Description= |
| ``latitude`` | Latitude between -90 and 90. |
| ``longitude`` | Longitude between -180 and 180. |
| ``accuracy`` | Non-negative accuracy value. Defaults to 0. |

Example:
| ${permissions} =    Create List    geolocation
| `New Context`    permissions=${permissions}
| `Set Geolocation`    60.173708, 24.982263    3    # Points to Korkeasaari in Helsinki.

[https://forum.robotframework.org/t//4329|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Set Offline" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="351">
<arguments>
<arg>offline: bool = True</arg>
</arguments>
<doc>Toggles current Context's offline emulation.

| =Arguments= | =Description= |
| ``offline`` | Toggles the offline mode. Set to False to switch back to online mode. Defaults to True. |

[https://forum.robotframework.org/t//4330|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Set Retry Assertions For" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="237">
<arguments>
<arg>timeout: timedelta</arg>
<arg>scope: Scope { Global | Suite | Test | Task } = Scope.Suite</arg>
</arguments>
<doc>Sets the timeout used in retrying assertions when they fail.

| =Arguments= | =Description= |
| ``timeout`` | Assertion retry timeout will determine how long Browser library will retry an assertion to be true. |
| ``scope``   | Scope defines the live time of that setting. Available values are ``Global``, ``Suite`` or ``Test``/``Task``. See `Scope` for more details. |

The other keyword `Set Browser timeout` controls how long Playwright
will perform waiting in the node side for Elements to fulfill the
requirements of the specific keyword.

Returns the previous value of the assertion retry timeout.

Example:
| `Set Browser Timeout`    10 seconds
| ${old} =    `Set Retry Assertions For`    30s
| `Get Title`    ==    Login Page
| `Set Retry Assertions For`    ${old}

Example waits 10 seconds on Playwright to get the page title and library
will retry 30 seconds to make sure that title is correct.

[https://forum.robotframework.org/t//4331|Comment &gt;&gt;]</doc>
<tags>
<tag>Config</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Set Selector Prefix" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="268">
<arguments>
<arg>prefix: typing.Optional[str]</arg>
<arg>scope: Scope { Global | Suite | Test | Task } = Scope.Suite</arg>
</arguments>
<doc>Sets the prefix for all selectors in the given scope.

| =Arguments= | =Description= |
| ``prefix``   | Prefix for all selectors. Prefix and selector will be separated by a single space. |
| ``scope``   | Scope defines the live time of that setting. Available values are ``Global``, ``Suite`` or ``Test``/``Task``. See `Scope` for more details. |

Returns the previous value of the prefix.

Example:
| ${old} =    `Set Selector Prefix`    iframe#embedded_page &gt;&gt;&gt;
| `Click`    button#login_btn       # Clicks on button inside iframe with the selector ``iframe#embedded_page &gt;&gt;&gt; button#login_btn``
| `Set Selector Prefix`    ${old}

Example will click on button with id ``login_btn`` inside iframe with id ``embedded_page``.
The resulting selector will be ``iframe#embedded_page &gt;&gt;&gt; button#login_btn``.

[https://forum.robotframework.org/t//4741|Comment &gt;&gt;]</doc>
<tags>
<tag>Config</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Set Strict Mode" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\strict_mode.py" lineno="20">
<arguments>
<arg>mode: bool</arg>
<arg>scope: Scope { Global | Suite | Test | Task } = Scope.Suite</arg>
</arguments>
<doc>Controls library strict mode.

| =Arguments= | =Description= |
| ``mode`` | When set to ``True``, keywords that are searching elements will use Playwright [https://playwright.dev/docs/api/class-page#page-query-selector|strict mode]. Keyword changes library strict mode value and keyword also return the previous strict mode value. |
| ``scope``   | Scope defines the live time of that setting. Available values are ``Global``, ``Suite`` or ``Test``/``Task``. See `Scope` for more details. |


Example:
| ${old_mode} =      Set Strict Mode    False
| Get Text           //input            # Does not fail if selector points to one or more elements
| Set Strict Mode    ${old_mode}

[https://forum.robotframework.org/t//4332|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Set Viewport Size" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="325">
<arguments>
<arg>width: int</arg>
<arg>height: int</arg>
</arguments>
<doc>Sets current Pages viewport size to specified dimensions.

In the case of multiple pages in a single browser,
each page can have its own viewport size. However,
`New Context` allows to set viewport size (and more) for all
later opened pages in the context at once.

`Set Viewport Size` will resize the page.
A lot of websites don't expect phones to change size,
so you should set the viewport size before navigating to
the page with `New Context` before opening the page itself.

| =Arguments= | =Description= |
| ``width`` | Sets the width size. |
| ``height`` | Sets the height size. |

[https://forum.robotframework.org/t//4333|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Show Keyword Banner" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="294">
<arguments>
<arg>show: bool = True</arg>
<arg>style: str = </arg>
</arguments>
<doc>Controls if the keyword banner is shown on page or not.

Keyword call banner is a css overlay that shows the currently executed keyword directly on page.
This is useful for debugging and for showing the test execution on video recordings.
By default, the banner is not shown on page except when running in presenter mode.

The banner can be controlled by an import setting of Browser library. (see `Importing` section)

| =Arguments= | =Description= |
| ``show`` | If `True` banner is shown on page. If `False` banner is not shown on page. If `None` banner is shown on page only when running in presenter mode. |
| ``style`` | Additional css styles to be applied to the banner. These styles are css settings and may override the existing ones for the banner. |


Example:
| Show Keyword Banner     True    top: 5px; bottom: auto; left: 5px; background-color: #00909077; font-size: 9px; color: black;   # Show banner on top left corner with custom styles
| Show Keyword Banner     False   # Hide banner

[https://forum.robotframework.org/t//4716|Comment &gt;&gt;]</doc>
<tags>
<tag>Config</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Switch Browser" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="999">
<arguments>
<arg>id: str</arg>
</arguments>
<doc>Switches the currently active Browser to another open Browser.

Returns a stable identifier for the previous browser.
See `Browser, Context and Page` for more information about Browser and related concepts.

| =Arguments= | =Description= |
| id          | The id of the browser to switch to. Example: ``browser=96207191-8147-44e7-b9ac-5e04f2709c1d``. A browser id is returned by `New Browser` when it is started or can be fetched from the browser catalog when returned by `Get Browser Catalog`. |

[https://forum.robotframework.org/t//4334|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Switch Context" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="1017">
<arguments>
<arg>id: str</arg>
<arg>browser: typing.Union[Browser.utils.data_types.SelectionType, str] = CURRENT</arg>
</arguments>
<doc>Switches the active BrowserContext to another open context.

Returns a stable identifier for the previous context.
See `Browser, Context and Page` for more information about Context and related concepts.

| =Arguments= | =Description= |
| ``id``      | The id of the context to switch to. Example: ``context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089``. A context id is returned by `New Context` when it is started or can be fetched from the browser catalog when returned by `Get Browser Catalog`. |
| ``browser`` | The browser in which to search for that context. ``CURRENT`` for the currently active browser, ``ALL`` to search in all open browsers or the id of the browser where to switch context. |

Example:
| ${first_context} =     `New Context`
| `New Page`             ${URL1}
| ${second_context} =    `New Context`
| `New Page`             ${URL2}
| `Switch Context`       ${first_context}    # Switches back to first context and page.

[https://forum.robotframework.org/t//4335|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Switch Page" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\playwright_state.py" lineno="1056">
<arguments>
<arg>id: typing.Union[Browser.utils.data_types.NewPageDetails, str]</arg>
<arg>context: typing.Union[Browser.utils.data_types.SelectionType, str] = CURRENT</arg>
<arg>browser: typing.Union[Browser.utils.data_types.SelectionType, str] = CURRENT</arg>
</arguments>
<doc>Switches the active browser page to another open page by ``id`` or ``NEW``.

Returns a stable identifier ``id`` for the previous page.
See `Browser, Context and Page` for more information about Page and related concepts.

| =Arguments= | =Description= |
| ``id``      | The id or alias of the page to switch to. Example: ``page=8baf2991-5eaf-444d-a318-8045f914e96a`` or ``NEW``. Can be a string or a dictionary returned by `New Page` Keyword. A page id can be fetched from the browser catalog when returned by `Get Browser Catalog`. ``NEW`` can be used to switch to a pop-up that just has been opened by the webpage, ``CURRENT`` can be used to switch to the active page of a different context or browser, identified by their id. |
| ``context`` | The context in which to search for that page. ``CURRENT`` for the currently active context, ``ALL`` to search in all open contexts or the id of the context where to switch page. |
| ``browser`` | The browser in which to search for that page. ``CURRENT`` for the currently active browser, ``ALL`` to search in all open browsers or the id of the browser where to switch page. |

``New`` may timeout if no new pages exists before library timeout.

Example:
| `Click`           button#pops_up    # Open new page
| ${previous} =    `Switch Page`      NEW

[https://forum.robotframework.org/t//4336|Comment &gt;&gt;]</doc>
<tags>
<tag>BrowserControl</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Take Screenshot" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\browser_control.py" lineno="89">
<arguments>
<arg>filename: str = robotframework-browser-screenshot-{index}</arg>
<arg>selector: typing.Optional[str] = None</arg>
<arg>fullPage: bool = False</arg>
<arg>fileType: ScreenshotFileTypes { png | jpeg } = ScreenshotFileTypes.png</arg>
<arg>quality: typing.Optional[int] = None</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>crop: typing.Optional[Browser.utils.data_types.BoundingBox] = None</arg>
<arg>disableAnimations: bool = False</arg>
<arg>mask: typing.Union[typing.List[str], str] = </arg>
<arg>omitBackground: bool = False</arg>
</arguments>
<doc>Takes a screenshot of the current window or element and saves it to disk.

| =Arguments= | =Description= |
| ``filename`` | Filename into which to save. The file will be saved into the robot framework  ${OUTPUTDIR}/browser/screenshot directory by default, but it can overwritten by providing  custom path or filename. String ``{index}`` in filename will be replaced with a rolling  number. Use this to not override filenames. If filename equals to EMBED (case insensitive),  then screenshot is embedded as Base64 image to the log.html. The image is saved temporally  to the disk and warning is displayed if removing the temporary file fails. The ${OUTPUTDIR}/browser/ is removed at the first suite startup. |
| ``selector`` | Take a screenshot of the element matched by selector. See the `Finding elements` section for details about the selectors. If not provided take a screenshot of current viewport. |
| ``fullPage`` | When True, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to False. |
| ``fileType`` | &lt;"png"|"jpeg"&gt; Specify screenshot type, defaults to png. |
| ``quality`` | The quality of the image, between 0-100. Not applicable to png images. |
| ``timeout`` | Maximum time how long taking screenshot can last, defaults to library timeout. Supports Robot Framework time format, like 10s or 1 min, pass 0 to disable timeout. The default value can be changed by using the `Set Browser Timeout` keyword. |
| ``crop`` | Crops the taken screenshot to the given box. It takes same dictionary as returned from `Get BoundingBox`. Cropping only works on page screenshot, so if no selector is given. |
| ``disableAnimations`` | When set to ``True``, stops CSS animations, CSS transitions and Web Animations. Animations get different treatment depending on their duration:  - finite animations are fast-forwarded to completion, so they'll fire transitionend event.  - infinite animations are canceled to initial state, and then played over after the screenshot. |
| ``mask`` | Specify selectors that should be masked when the screenshot is taken. Masked elements will be overlayed with a pink box ``#FF00FF`` that completely covers its bounding box. Argument can take a single selector string or a list of selector strings if multiple different elements should be masked. |
| ``omitBackground`` | Hides default white background and allows capturing screenshots with transparency. Not applicable to jpeg images. |

Keyword uses strict mode if selector is defined. See `Finding elements` for more details
about strict mode.

Example
| `Take Screenshot`                                 # Takes screenshot from page with default filename
| `Take Screenshot`   selector=id=username_field    # Captures element in image
| # Takes screenshot with jpeg extension, defines image quality and timeout how long taking screenhost should last
| `Take Screenshot`   fullPage=True    fileType=jpeg    quality=50    timeout=10s

[https://forum.robotframework.org/t//4337|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
</tags>
</kw>
<kw name="Type Secret" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="137">
<arguments>
<arg>selector: str</arg>
<arg>secret: str</arg>
<arg>delay: timedelta = 0:00:00</arg>
<arg>clear: bool = True</arg>
</arguments>
<doc>Types the given secret from ``variable_name`` into the text field
found by ``selector``.

This keyword does not log secret in Robot Framework logs, if keyword resolves
the variable value internally. If ``enable_playwright_debug`` is enabled in
the library import, secret will be always visible as plain text in the playwright
debug logs, regardless of the Robot Framework log level.

| =Arguments= | =Description= |
| ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |
| ``secret`` | Environment variable name with % prefix or a local variable with $ prefix that has the secret text value. Variable names can be used with and without curly braces. |
| ``delay`` | Delay between the single key strokes. It may be either a number or a Robot Framework time string. Time strings are fully explained in an appendix of Robot Framework User Guide. Defaults to ``0 ms``. Example: ``50 ms`` |
| ``clear`` | Set to false, if the field shall not be cleared before typing. Defaults to true. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

See `Type Text` for details.

Example
| `Type Secret`    input#username_field    $username      # Keyword resolves ${username} variable value from Robot Framework variables
| `Type Secret`    input#username_field    %username      # Keyword resolves $USERNAME/%USERNAME% variable value from environment variables
| `Type Secret`    input#username_field    ${username}    # Robot Framework resolves the variable value, but secrect can leak to Robot framework output files.

[https://forum.robotframework.org/t//4338|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Type Text" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="48">
<arguments>
<arg>selector: str</arg>
<arg>txt: str</arg>
<arg>delay: timedelta = 0:00:00</arg>
<arg>clear: bool = True</arg>
</arguments>
<doc>Types the given ``txt`` into the text field found by ``selector``.

Sends a ``keydown``, ``keypress/input``, and ``keyup`` event for each
character in the text.

| =Arguments= | =Description= |
| ``selector`` | Selector of the text field. See the `Finding elements` section for details about the selectors. |
| ``txt`` | Text for the text field. |
| ``delay`` | Delay between the single key strokes. It may be either a number or a Robot Framework time string. Time strings are fully explained in an appendix of Robot Framework User Guide. Defaults to ``0 ms``. Example: ``50 ms`` |
| ``clear`` | Set to false, if the field shall not be cleared before typing. Defaults to true. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

See `Fill Text` for direct filling of the full text at once.

Example
| `Type Text`    input#username_field    user
| `Type Text`    input#username_field    user    delay=10 ms    clear=No

[https://forum.robotframework.org/t//4339|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Uncheck Checkbox" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="593">
<arguments>
<arg>selector: str</arg>
<arg>force: bool = False</arg>
</arguments>
<doc>Unchecks the checkbox found by ``selector``.

| =Arguments= | =Description= |
| ``selector`` | Selector of the checkbox. See the `Finding elements` section for details about the selectors. |
| ``force`` | Set to True to skip Playwright's [https://playwright.dev/docs/actionability | Actionability checks]. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Does nothing if the element is not checked/selected.

[https://forum.robotframework.org/t//4340|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Upload File By Selector" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="1151">
<arguments>
<arg>selector: str</arg>
<arg>path: PathLike</arg>
</arguments>
<doc>Uploads file from `path` to file input element matched by selector.

Fails if upload is not done before library timeout.
Therefor it may be necessary to increase the timeout with `Set Browser Timeout`.

| =Arguments= | =Description= |
| ``selector`` | Identifies the file input element. |
| ``path`` | Path to the file to be uploaded. |

Example:
| `Upload File By Selector`    //input[@type='file']    big_file.zip

[https://forum.robotframework.org/t//4341|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Setter</tag>
</tags>
</kw>
<kw name="Wait For" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\promises.py" lineno="159">
<arguments>
<arg>*promises: Future</arg>
</arguments>
<doc>Waits for promises to finish and returns results from them.

Returns one result if one promise waited. Otherwise returns an array of
results. If one fails, then this keyword will fail.

See `Promise To` for more information about promises.

For general waiting of elements please see `Implicit waiting`.

| =Arguments= | =Description= |
| ``promises`` | Promises to wait for. |

Example:
| ${promise}=    `Promise To`            `Wait For Response`     matcher=     timeout=3
| `Click`         \#delayed_request
| ${body}=       `Wait For`              ${promise}

[https://forum.robotframework.org/t//4342|Comment &gt;&gt;]</doc>
<tags>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Wait For Alert" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\interaction.py" lineno="776">
<arguments>
<arg>action: DialogAction { accept | dismiss }</arg>
<arg>prompt_input: str = </arg>
<arg>text: typing.Optional[str] = None</arg>
</arguments>
<doc>Returns a promise to wait for next dialog on page, handles it with ``action`` and optionally verifies the dialogs text.

Dialog/alert can be any of alert, beforeunload, confirm or prompt.

| =Arguments= | =Description= |
| ``action`` | How to handle the alert. Can be ``accept`` or ``dismiss``. |
| ``prompt_input`` | The value to enter into prompt. Only valid if ``action`` argument equals ``accept``. Defaults to empty string. |
| ``text`` | Optional text to verify the dialogs text. |


The main difference between this keyword and `Handle Future Dialogs`
is that `Handle Future Dialogs` keyword is automatically set as promise.
But this keyword must be called as argument to `Promise To` keyword. Also this
keyword can optionally verify the dialogue text and return it. If ``text`` is
argument ``None`` or is not set, dialogue text is not verified.

Example with returning text:

| ${promise} =         `Promise To`    `Wait For Alert`    action=accept
| `Click`              id=alerts
| ${text} =            `Wait For`      ${promise}
| Should Be Equal      ${text}         Am an alert

Example with text verify:

| ${promise} =       Promise To    Wait For Alert    action=accept    text=Am an alert
| Click              id=alerts
| ${text} =          Wait For      ${promise}

[https://forum.robotframework.org/t//4343|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Wait For All Promises" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\promises.py" lineno="185">
<arguments>
</arguments>
<doc>Waits for all promises to finish.

If one promises fails, then this keyword will fail.

Example:
| `Promise To`               Wait For Response     matcher=     timeout=3
| `Click`                    \#delayed_request
| `Wait For All Promises`

[https://forum.robotframework.org/t//4344|Comment &gt;&gt;]</doc>
<tags>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Wait For Condition" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\waiter.py" lineno="223">
<arguments>
<arg>condition: ConditionInputs { attribute | attribute_names | ... }</arg>
<arg>*args: Any</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits for a condition, defined with Browser getter keywords to become True.

This Keyword is basically just a wrapper around our assertion keywords, but with a timeout.
It can be used to wait for anything that also can be asserted with our keywords.

In comparison to Robot Frameworks `Wait Until Keywords Succeeds` this keyword is more
readable and easier to use but is limited to Browser libraries assertion keywords.

| =Arguments= | =Description= |
| ``condition`` | A condition, defined with Browser getter keywords, without the word ``Get``. |
| ``*args`` | Arguments to pass to the condition keyword. |
| ``timeout`` | Timout to wait for the condition to become True. Uses default timeout of the library if not set. |
| ``message`` | Overrides the default error message. |


The easiest way to use this keyword is first starting with an assertion keyword with assertion like: `Get Text`

Start:
| `Get Text`    id=status_bar   contains    Done

Then you replace the word `Get` with `Wait For Condition    ` and if necessary add the timeout argument.

End:
| `Wait For Condition`    Text    id=status_bar   contains    Done


Example usage:
| `Wait For Condition`    Element States    id=cdk-overlay-0    ==    detached
| `Wait For Condition`    Element States     //h1    contains    visible    editable    enabled    timeout=2 s
| `Wait For Condition`    Title    should start with    Robot
| `Wait For Condition`    Url    should end with    robotframework.org

[https://forum.robotframework.org/t//4346|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Wait For Elements State" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\waiter.py" lineno="30">
<arguments>
<arg>selector: str</arg>
<arg>state: ElementState { attached | detached | visible | ... } = 4</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits for the element found by ``selector`` to satisfy state option.

Note that Browser library has `Implicit waiting` mechanisms. Depending on
the situation you might not need to use `Wait for Elements State`.

State options could be either appear/disappear from dom, or become visible/hidden.
If at the moment of calling the keyword, the selector already satisfies the condition,
the keyword will return immediately.

If the selector doesn't satisfy the condition within the timeout the keyword will FAIL.

| =Arguments= | =Description= |
| ``selector`` | Selector of the corresponding object. See the `Finding elements` section for details about the selectors. |
| ``state`` | See `ElementState` for explanation. |
| ``timeout`` | uses default timeout from library if not set. |
| ``message`` | overrides the default error message. The ``message`` argument accepts `{selector}`, `{function}`, and `{timeout}` [https://docs.python.org/3/library/stdtypes.html#str.format|format] options. The `{function}` formatter is same ``state`` argument value. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Example:
| `Wait For Elements State`    //h1    visible    timeout=2 s
| `Wait For Elements State`    //hi    focused    1s

[https://forum.robotframework.org/t/comments-for-wait-for-elements-state/4345|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Wait For Function" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\waiter.py" lineno="147">
<arguments>
<arg>function: str</arg>
<arg>selector: str = </arg>
<arg>polling: typing.Union[str, datetime.timedelta] = raf</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Polls JavaScript expression or function in browser until it returns a (JavaScript) truthy value.

| =Arguments= | =Description= |
| ``function`` | A valid javascript function or a javascript function body. For example ``() =&gt; true`` and ``true`` will behave similarly. |
| ``selector`` | Selector to resolve and pass to the JavaScript function. This will be the first argument the function receives. If given a selector a function is necessary, with an argument to capture the elementhandle. For example ``(element) =&gt; document.activeElement === element`` See the `Finding elements` section for details about the selectors. |
| ``polling`` | Default polling value of "raf" polls in a callback for ``requestAnimationFrame``. Any other value for polling will be parsed as a robot framework time for interval between polls. |
| ``timeout`` | Uses default timeout of the library if not set. |
| ``message`` | overrides the default error message. The ``message`` argument accepts `{selector}`, `{function}`, and `{timeout}` [https://docs.python.org/3/library/stdtypes.html#str.format|format] options. |

Keyword uses strict mode, see `Finding elements` for more details about strict mode.

Example usage:
| ${promise}      `Promise To`      `Wait For Function`    element =&gt; element.style.width=="100%"    selector=\#progress_bar    timeout=4s
| `Click`         \#progress_bar
| `Wait For`      ${promise}

[https://forum.robotframework.org/t//4346|Comment &gt;&gt;]</doc>
<tags>
<tag>PageContent</tag>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Wait For Navigation" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\network.py" lineno="216">
<arguments>
<arg>url: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>wait_until: PageLoadStates { load | domcontentloaded | ... } = PageLoadStates.load</arg>
</arguments>
<doc>Waits until page has navigated to given ``url``.


| =Arguments= | =Description= |
| ``url`` | Expected navigation target address either the exact match or a JavaScript-like regex wrapped in ``/`` symbols. |
| ``timeout`` | Timeout supports Robot Framework time format. Uses default timeout if not set. |
| ``wait_until`` | When to consider operation succeeded, defaults to load. Events can be either: ``domcontentloaded`` - consider operation to be finished when the DOMContentLoaded event is fired. ``load`` - consider operation to be finished when the load event is fired. ``networkidle`` - consider operation to be finished when there are no network connections for at least 500 ms. ``commit`` - consider operation to be finished when network response is received and the document started loading. |


Keyword works only when page is loaded and does not work if URL fragment changes. Example if
https://marketsquare.github.io/robotframework-browser/Browser.html changes to
https://marketsquare.github.io/robotframework-browser/Browser.html#Wait%20For%20Navigation
keyword will fail.

Example:
| `Go To`                  ${ROOT_URL}/redirector.html
| `Wait for navigation`    ${ROOT_URL}/posted.html    wait_until=${wait_until}

[https://forum.robotframework.org/t//4347|Comment &gt;&gt;]</doc>
<tags>
<tag>HTTP</tag>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Wait For Request" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\network.py" lineno="125">
<arguments>
<arg>matcher: str = </arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
</arguments>
<doc>Waits for request matching matcher to be made.


| =Arguments= | =Description= |
| ``matcher`` | Request URL string, JavaScript regex or JavaScript function to match request by. By default (with empty string) matches first available request. For additional information, see the Playwright [https://playwright.dev/docs/api/class-page/#page-wait-for-request|waitForRequest documentation]. |
| ``timeout`` | Timeout supports Robot Framework time format. Uses default timeout if not set. |


Example:
| `Click`               \#delayed_request
| `Wait For Request`    timeout=1s

Async Example:
| ${promise} =    `Promise To`         `Wait For Request`    matcher=\\/\\/local\\w+\\:\\d+\\/api    timeout=3s
| `Click`         \#delayed_request
| `Wait For`      ${promise}

JavaScript Function Example:
| `Click`               \#delayed_request    # Creates response which should be waited before pressing save.
| `Wait For Request`    [https://playwright.dev/docs/api/class-request|request] =&gt; request.url().endsWith('api/get/json') &amp;&amp; request.method() === 'GET'

[https://forum.robotframework.org/t//4348|Comment &gt;&gt;]</doc>
<tags>
<tag>HTTP</tag>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Wait For Response" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\network.py" lineno="154">
<arguments>
<arg>matcher: str = </arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
</arguments>
<doc>Waits for response matching matcher and returns python dict with contents.


| =Arguments= | =Description= |
| ``matcher`` | Request URL string, JavaScript regex or JavaScript function to match request by. By default (with empty string) matches first available request. For additional information, see the Playwright [https://playwright.dev/docs/api/class-page/#page-wait-for-response|waitForResponse documentation]. |
| ``timeout`` | Timeout supports Robot Framework time format. Uses default timeout if not set. |

The response is a Python dictionary with following attributes:
  - ``status`` &lt;int&gt; The status code of the response.
  - ``statusText`` &lt;str&gt; Status text corresponding to ``status``, e.g OK or INTERNAL SERVER ERROR.
  - ``body`` &lt;dict | str&gt; The response body. If the body can be parsed as a JSON obejct,
  it will be returned as Python dictionary, otherwise it is returned as a string.
  - ``headers`` &lt;dict&gt; A dictionary containing all response headers.
  - ``ok`` &lt;bool&gt; Whether the request was successfull, i.e. the ``status`` is range 200-299.
  - ``request`` &lt;dict&gt; containing ``method`` &lt;str&gt;, ``headers`` &lt;dict&gt; and ``postData`` &lt;dict&gt; | &lt;str&gt;
  - ``url`` &lt;str&gt; url of the request.

Synchronous Example:
| `Click`                \#delayed_request    # Creates response which should be waited before next actions
| `Wait For Response`    matcher=\\/\\/local\\w+\\:\\d+\\/api
| `Click`                \#save

Asynchronous Example:
| ${promise} =    `Promise To`    `Wait For Response`    timeout=60s
| `Click`           \#delayed_request    # Creates response which should be waited before pressing save.
| `Click`           \#next
| `Wait For`        ${promise}            # Waits for the response
| `Click`           \#save

JavaScript Function Example:
| `Click`               \#delayed_request    # Creates response which should be waited before pressing save.
| `Wait For Response`   [https://playwright.dev/docs/api/class-response/|response] =&gt; response.url().endsWith('json') &amp;&amp; response.request().method() === 'GET'

[https://forum.robotframework.org/t//4349|Comment &gt;&gt;]</doc>
<tags>
<tag>HTTP</tag>
<tag>Wait</tag>
</tags>
</kw>
<kw name="Wait Until Network Is Idle" source="C:\Users\SRaina\AppData\Local\Programs\Python\Python311\Lib\site-packages\Browser\keywords\network.py" lineno="195">
<arguments>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
</arguments>
<doc>Waits until there has been at least one instance of 500 ms of no network traffic on the page after loading.

Doesn't wait for network traffic that wasn't initiated within 500ms of page load.

| =Arguments= | =Description= |
| ``timeout`` | Timeout supports Robot Framework time format. Uses browser timeout if not set. |

Example:
| `Go To`                         ${URL}
| `Wait Until Network Is Idle`    timeout=3s

[https://forum.robotframework.org/t//4350|Comment &gt;&gt;]</doc>
<tags>
<tag>HTTP</tag>
<tag>Wait</tag>
</tags>
</kw>
</keywordspec>